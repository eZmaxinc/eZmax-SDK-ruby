=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module EzmaxApi
  # A Province AutocompleteElement Response
  class ProvinceAutocompleteElementResponse
    # The unique ID of the Province.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|(Canada) Alberta |2|(Canada) British Columbia| |3|(Canada) Manitoba| |3|(Canada) Manitoba| |4|(Canada) New Brunswick| |5|(Canada) Newfoundland| |6|(Canada) Northwest Territories| |7|(Canada) Nova Scotia| |8|(Canada) Nunavut| |9|(Canada) Ontario| |10|(Canada) Prince Edward Island| |11|(Canada) Quebec| |12|(Canada) Saskatchewan| |13|(Canada) Yukon| |14|(United-States) Alabama| |15|(United-States) Alaska| |16|(United-States) Arizona| |17|(United-States) Arkansas| |18|(United-States) California| |19|(United-States) Colorado| |20|(United-States) Connecticut| |21|(United-States) Delaware| |22|(United-States) District of Columbia| |23|(United-States) Florida| |24|(United-States) Georgia| |25|(United-States) Hawaii| |26|(United-States) Idaho| |27|(United-States) Illinois| |28|(United-States) Indiana| |29|(United-States) Iowa| |30|(United-States) Kansas| |31|(United-States) Kentucky| |32|(United-States) Louisiane| |33|(United-States) Maine| |34|(United-States) Maryland| |35|(United-States) Massachusetts| |36|(United-States) Michigan| |37|(United-States) Minnesota| |38|(United-States) Mississippi| |39|(United-States) Missouri| |40|(United-States) Montana| |41|(United-States) Nebraska| |42|(United-States) Nevada| |43|(United-States) New Hampshire| |44|(United-States) New Jersey| |45|(United-States) New Mexico| |46|(United-States) New York| |47|(United-States) North Carolina| |48|(United-States) North Dakota| |49|(United-States) Ohio| |50|(United-States) Oklahoma| |51|(United-States) Oregon| |52|(United-States) Pennsylvania| |53|(United-States) Rhode Island| |54|(United-States) South Carolina| |55|(United-States) South Dakota| |56|(United-States) Tennessee| |57|(United-States) Texas| |58|(United-States) Utah| |60|(United-States) Vermont| |59|(United-States) Virginia| |61|(United-States) Washington| |62|(United-States) West Virginia| |63|(United-States) Wisconsin| |64|(United-States) Wyoming|
    attr_accessor :pki_province_id

    # The unique ID of the Country.  Here are some common values (Complete list must be retrieved from API):  |Value|Description| |-|-| |1|Canada| |2|United-States|
    attr_accessor :fki_country_id

    # The name of the Province in the language of the requester
    attr_accessor :s_province_name_x

    # The shortname of the Province
    attr_accessor :s_province_shortname

    # Whether the Province is active or not
    attr_accessor :b_province_isactive

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pki_province_id' => :'pkiProvinceID',
        :'fki_country_id' => :'fkiCountryID',
        :'s_province_name_x' => :'sProvinceNameX',
        :'s_province_shortname' => :'sProvinceShortname',
        :'b_province_isactive' => :'bProvinceIsactive'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pki_province_id' => :'Integer',
        :'fki_country_id' => :'Integer',
        :'s_province_name_x' => :'String',
        :'s_province_shortname' => :'String',
        :'b_province_isactive' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EzmaxApi::ProvinceAutocompleteElementResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EzmaxApi::ProvinceAutocompleteElementResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pki_province_id')
        self.pki_province_id = attributes[:'pki_province_id']
      else
        self.pki_province_id = nil
      end

      if attributes.key?(:'fki_country_id')
        self.fki_country_id = attributes[:'fki_country_id']
      else
        self.fki_country_id = nil
      end

      if attributes.key?(:'s_province_name_x')
        self.s_province_name_x = attributes[:'s_province_name_x']
      else
        self.s_province_name_x = nil
      end

      if attributes.key?(:'s_province_shortname')
        self.s_province_shortname = attributes[:'s_province_shortname']
      else
        self.s_province_shortname = nil
      end

      if attributes.key?(:'b_province_isactive')
        self.b_province_isactive = attributes[:'b_province_isactive']
      else
        self.b_province_isactive = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @pki_province_id.nil?
        invalid_properties.push('invalid value for "pki_province_id", pki_province_id cannot be nil.')
      end

      if @pki_province_id < 0
        invalid_properties.push('invalid value for "pki_province_id", must be greater than or equal to 0.')
      end

      if @fki_country_id.nil?
        invalid_properties.push('invalid value for "fki_country_id", fki_country_id cannot be nil.')
      end

      if @fki_country_id < 0
        invalid_properties.push('invalid value for "fki_country_id", must be greater than or equal to 0.')
      end

      if @s_province_name_x.nil?
        invalid_properties.push('invalid value for "s_province_name_x", s_province_name_x cannot be nil.')
      end

      pattern = Regexp.new(/^.{0,50}$/)
      if @s_province_name_x !~ pattern
        invalid_properties.push("invalid value for \"s_province_name_x\", must conform to the pattern #{pattern}.")
      end

      if @s_province_shortname.nil?
        invalid_properties.push('invalid value for "s_province_shortname", s_province_shortname cannot be nil.')
      end

      pattern = Regexp.new(/^.{1,3}$/)
      if @s_province_shortname !~ pattern
        invalid_properties.push("invalid value for \"s_province_shortname\", must conform to the pattern #{pattern}.")
      end

      if @b_province_isactive.nil?
        invalid_properties.push('invalid value for "b_province_isactive", b_province_isactive cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @pki_province_id.nil?
      return false if @pki_province_id < 0
      return false if @fki_country_id.nil?
      return false if @fki_country_id < 0
      return false if @s_province_name_x.nil?
      return false if @s_province_name_x !~ Regexp.new(/^.{0,50}$/)
      return false if @s_province_shortname.nil?
      return false if @s_province_shortname !~ Regexp.new(/^.{1,3}$/)
      return false if @b_province_isactive.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] pki_province_id Value to be assigned
    def pki_province_id=(pki_province_id)
      if pki_province_id.nil?
        fail ArgumentError, 'pki_province_id cannot be nil'
      end

      if pki_province_id < 0
        fail ArgumentError, 'invalid value for "pki_province_id", must be greater than or equal to 0.'
      end

      @pki_province_id = pki_province_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_country_id Value to be assigned
    def fki_country_id=(fki_country_id)
      if fki_country_id.nil?
        fail ArgumentError, 'fki_country_id cannot be nil'
      end

      if fki_country_id < 0
        fail ArgumentError, 'invalid value for "fki_country_id", must be greater than or equal to 0.'
      end

      @fki_country_id = fki_country_id
    end

    # Custom attribute writer method with validation
    # @param [Object] s_province_name_x Value to be assigned
    def s_province_name_x=(s_province_name_x)
      if s_province_name_x.nil?
        fail ArgumentError, 's_province_name_x cannot be nil'
      end

      pattern = Regexp.new(/^.{0,50}$/)
      if s_province_name_x !~ pattern
        fail ArgumentError, "invalid value for \"s_province_name_x\", must conform to the pattern #{pattern}."
      end

      @s_province_name_x = s_province_name_x
    end

    # Custom attribute writer method with validation
    # @param [Object] s_province_shortname Value to be assigned
    def s_province_shortname=(s_province_shortname)
      if s_province_shortname.nil?
        fail ArgumentError, 's_province_shortname cannot be nil'
      end

      pattern = Regexp.new(/^.{1,3}$/)
      if s_province_shortname !~ pattern
        fail ArgumentError, "invalid value for \"s_province_shortname\", must conform to the pattern #{pattern}."
      end

      @s_province_shortname = s_province_shortname
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pki_province_id == o.pki_province_id &&
          fki_country_id == o.fki_country_id &&
          s_province_name_x == o.s_province_name_x &&
          s_province_shortname == o.s_province_shortname &&
          b_province_isactive == o.b_province_isactive
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pki_province_id, fki_country_id, s_province_name_x, s_province_shortname, b_province_isactive].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EzmaxApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
