=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'date'
require 'time'

module EzmaxApi
  # A Ezmaxinvoicinguser Object
  class EzmaxinvoicinguserResponse
    # The unique ID of the Ezmaxinvoicinguser
    attr_accessor :pki_ezmaxinvoicinguser_id

    # The unique ID of the Ezmaxinvoicing
    attr_accessor :fki_ezmaxinvoicing_id

    # The unique ID of the Billingentityinternal.
    attr_accessor :fki_billingentityinternal_id

    # The description of the Billingentityinternal in the language of the requester
    attr_accessor :s_billingentityinternal_description_x

    # The unique ID of the User
    attr_accessor :fki_user_id

    # The number of ezsign documents
    attr_accessor :i_ezmaxinvoicinguser_ezsigndocument

    # Whether there is an eZsign account
    attr_accessor :b_ezmaxinvoicinguser_ezsignaccount

    # Whether it is billable for eZsign
    attr_accessor :b_ezmaxinvoicinguser_billableezsign

    attr_accessor :e_ezmaxinvoicinguser_variationezsign

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pki_ezmaxinvoicinguser_id' => :'pkiEzmaxinvoicinguserID',
        :'fki_ezmaxinvoicing_id' => :'fkiEzmaxinvoicingID',
        :'fki_billingentityinternal_id' => :'fkiBillingentityinternalID',
        :'s_billingentityinternal_description_x' => :'sBillingentityinternalDescriptionX',
        :'fki_user_id' => :'fkiUserID',
        :'i_ezmaxinvoicinguser_ezsigndocument' => :'iEzmaxinvoicinguserEzsigndocument',
        :'b_ezmaxinvoicinguser_ezsignaccount' => :'bEzmaxinvoicinguserEzsignaccount',
        :'b_ezmaxinvoicinguser_billableezsign' => :'bEzmaxinvoicinguserBillableezsign',
        :'e_ezmaxinvoicinguser_variationezsign' => :'eEzmaxinvoicinguserVariationezsign'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pki_ezmaxinvoicinguser_id' => :'Integer',
        :'fki_ezmaxinvoicing_id' => :'Integer',
        :'fki_billingentityinternal_id' => :'Integer',
        :'s_billingentityinternal_description_x' => :'String',
        :'fki_user_id' => :'Integer',
        :'i_ezmaxinvoicinguser_ezsigndocument' => :'Integer',
        :'b_ezmaxinvoicinguser_ezsignaccount' => :'Boolean',
        :'b_ezmaxinvoicinguser_billableezsign' => :'Boolean',
        :'e_ezmaxinvoicinguser_variationezsign' => :'FieldEEzmaxinvoicinguserVariationezsign'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EzmaxApi::EzmaxinvoicinguserResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EzmaxApi::EzmaxinvoicinguserResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pki_ezmaxinvoicinguser_id')
        self.pki_ezmaxinvoicinguser_id = attributes[:'pki_ezmaxinvoicinguser_id']
      end

      if attributes.key?(:'fki_ezmaxinvoicing_id')
        self.fki_ezmaxinvoicing_id = attributes[:'fki_ezmaxinvoicing_id']
      end

      if attributes.key?(:'fki_billingentityinternal_id')
        self.fki_billingentityinternal_id = attributes[:'fki_billingentityinternal_id']
      else
        self.fki_billingentityinternal_id = nil
      end

      if attributes.key?(:'s_billingentityinternal_description_x')
        self.s_billingentityinternal_description_x = attributes[:'s_billingentityinternal_description_x']
      else
        self.s_billingentityinternal_description_x = nil
      end

      if attributes.key?(:'fki_user_id')
        self.fki_user_id = attributes[:'fki_user_id']
      else
        self.fki_user_id = nil
      end

      if attributes.key?(:'i_ezmaxinvoicinguser_ezsigndocument')
        self.i_ezmaxinvoicinguser_ezsigndocument = attributes[:'i_ezmaxinvoicinguser_ezsigndocument']
      else
        self.i_ezmaxinvoicinguser_ezsigndocument = nil
      end

      if attributes.key?(:'b_ezmaxinvoicinguser_ezsignaccount')
        self.b_ezmaxinvoicinguser_ezsignaccount = attributes[:'b_ezmaxinvoicinguser_ezsignaccount']
      else
        self.b_ezmaxinvoicinguser_ezsignaccount = nil
      end

      if attributes.key?(:'b_ezmaxinvoicinguser_billableezsign')
        self.b_ezmaxinvoicinguser_billableezsign = attributes[:'b_ezmaxinvoicinguser_billableezsign']
      else
        self.b_ezmaxinvoicinguser_billableezsign = nil
      end

      if attributes.key?(:'e_ezmaxinvoicinguser_variationezsign')
        self.e_ezmaxinvoicinguser_variationezsign = attributes[:'e_ezmaxinvoicinguser_variationezsign']
      else
        self.e_ezmaxinvoicinguser_variationezsign = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@pki_ezmaxinvoicinguser_id.nil? && @pki_ezmaxinvoicinguser_id < 0
        invalid_properties.push('invalid value for "pki_ezmaxinvoicinguser_id", must be greater than or equal to 0.')
      end

      if !@fki_ezmaxinvoicing_id.nil? && @fki_ezmaxinvoicing_id < 0
        invalid_properties.push('invalid value for "fki_ezmaxinvoicing_id", must be greater than or equal to 0.')
      end

      if @fki_billingentityinternal_id.nil?
        invalid_properties.push('invalid value for "fki_billingentityinternal_id", fki_billingentityinternal_id cannot be nil.')
      end

      if @fki_billingentityinternal_id < 0
        invalid_properties.push('invalid value for "fki_billingentityinternal_id", must be greater than or equal to 0.')
      end

      if @s_billingentityinternal_description_x.nil?
        invalid_properties.push('invalid value for "s_billingentityinternal_description_x", s_billingentityinternal_description_x cannot be nil.')
      end

      if @fki_user_id.nil?
        invalid_properties.push('invalid value for "fki_user_id", fki_user_id cannot be nil.')
      end

      if @fki_user_id < 0
        invalid_properties.push('invalid value for "fki_user_id", must be greater than or equal to 0.')
      end

      if @i_ezmaxinvoicinguser_ezsigndocument.nil?
        invalid_properties.push('invalid value for "i_ezmaxinvoicinguser_ezsigndocument", i_ezmaxinvoicinguser_ezsigndocument cannot be nil.')
      end

      if @i_ezmaxinvoicinguser_ezsigndocument < 0
        invalid_properties.push('invalid value for "i_ezmaxinvoicinguser_ezsigndocument", must be greater than or equal to 0.')
      end

      if @b_ezmaxinvoicinguser_ezsignaccount.nil?
        invalid_properties.push('invalid value for "b_ezmaxinvoicinguser_ezsignaccount", b_ezmaxinvoicinguser_ezsignaccount cannot be nil.')
      end

      if @b_ezmaxinvoicinguser_billableezsign.nil?
        invalid_properties.push('invalid value for "b_ezmaxinvoicinguser_billableezsign", b_ezmaxinvoicinguser_billableezsign cannot be nil.')
      end

      if @e_ezmaxinvoicinguser_variationezsign.nil?
        invalid_properties.push('invalid value for "e_ezmaxinvoicinguser_variationezsign", e_ezmaxinvoicinguser_variationezsign cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@pki_ezmaxinvoicinguser_id.nil? && @pki_ezmaxinvoicinguser_id < 0
      return false if !@fki_ezmaxinvoicing_id.nil? && @fki_ezmaxinvoicing_id < 0
      return false if @fki_billingentityinternal_id.nil?
      return false if @fki_billingentityinternal_id < 0
      return false if @s_billingentityinternal_description_x.nil?
      return false if @fki_user_id.nil?
      return false if @fki_user_id < 0
      return false if @i_ezmaxinvoicinguser_ezsigndocument.nil?
      return false if @i_ezmaxinvoicinguser_ezsigndocument < 0
      return false if @b_ezmaxinvoicinguser_ezsignaccount.nil?
      return false if @b_ezmaxinvoicinguser_billableezsign.nil?
      return false if @e_ezmaxinvoicinguser_variationezsign.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] pki_ezmaxinvoicinguser_id Value to be assigned
    def pki_ezmaxinvoicinguser_id=(pki_ezmaxinvoicinguser_id)
      if pki_ezmaxinvoicinguser_id.nil?
        fail ArgumentError, 'pki_ezmaxinvoicinguser_id cannot be nil'
      end

      if pki_ezmaxinvoicinguser_id < 0
        fail ArgumentError, 'invalid value for "pki_ezmaxinvoicinguser_id", must be greater than or equal to 0.'
      end

      @pki_ezmaxinvoicinguser_id = pki_ezmaxinvoicinguser_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_ezmaxinvoicing_id Value to be assigned
    def fki_ezmaxinvoicing_id=(fki_ezmaxinvoicing_id)
      if fki_ezmaxinvoicing_id.nil?
        fail ArgumentError, 'fki_ezmaxinvoicing_id cannot be nil'
      end

      if fki_ezmaxinvoicing_id < 0
        fail ArgumentError, 'invalid value for "fki_ezmaxinvoicing_id", must be greater than or equal to 0.'
      end

      @fki_ezmaxinvoicing_id = fki_ezmaxinvoicing_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_billingentityinternal_id Value to be assigned
    def fki_billingentityinternal_id=(fki_billingentityinternal_id)
      if fki_billingentityinternal_id.nil?
        fail ArgumentError, 'fki_billingentityinternal_id cannot be nil'
      end

      if fki_billingentityinternal_id < 0
        fail ArgumentError, 'invalid value for "fki_billingentityinternal_id", must be greater than or equal to 0.'
      end

      @fki_billingentityinternal_id = fki_billingentityinternal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_user_id Value to be assigned
    def fki_user_id=(fki_user_id)
      if fki_user_id.nil?
        fail ArgumentError, 'fki_user_id cannot be nil'
      end

      if fki_user_id < 0
        fail ArgumentError, 'invalid value for "fki_user_id", must be greater than or equal to 0.'
      end

      @fki_user_id = fki_user_id
    end

    # Custom attribute writer method with validation
    # @param [Object] i_ezmaxinvoicinguser_ezsigndocument Value to be assigned
    def i_ezmaxinvoicinguser_ezsigndocument=(i_ezmaxinvoicinguser_ezsigndocument)
      if i_ezmaxinvoicinguser_ezsigndocument.nil?
        fail ArgumentError, 'i_ezmaxinvoicinguser_ezsigndocument cannot be nil'
      end

      if i_ezmaxinvoicinguser_ezsigndocument < 0
        fail ArgumentError, 'invalid value for "i_ezmaxinvoicinguser_ezsigndocument", must be greater than or equal to 0.'
      end

      @i_ezmaxinvoicinguser_ezsigndocument = i_ezmaxinvoicinguser_ezsigndocument
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pki_ezmaxinvoicinguser_id == o.pki_ezmaxinvoicinguser_id &&
          fki_ezmaxinvoicing_id == o.fki_ezmaxinvoicing_id &&
          fki_billingentityinternal_id == o.fki_billingentityinternal_id &&
          s_billingentityinternal_description_x == o.s_billingentityinternal_description_x &&
          fki_user_id == o.fki_user_id &&
          i_ezmaxinvoicinguser_ezsigndocument == o.i_ezmaxinvoicinguser_ezsigndocument &&
          b_ezmaxinvoicinguser_ezsignaccount == o.b_ezmaxinvoicinguser_ezsignaccount &&
          b_ezmaxinvoicinguser_billableezsign == o.b_ezmaxinvoicinguser_billableezsign &&
          e_ezmaxinvoicinguser_variationezsign == o.e_ezmaxinvoicinguser_variationezsign
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pki_ezmaxinvoicinguser_id, fki_ezmaxinvoicing_id, fki_billingentityinternal_id, s_billingentityinternal_description_x, fki_user_id, i_ezmaxinvoicinguser_ezsigndocument, b_ezmaxinvoicinguser_ezsignaccount, b_ezmaxinvoicinguser_billableezsign, e_ezmaxinvoicinguser_variationezsign].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EzmaxApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
