=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module EzmaxApi
  # An Ezsigndocument Object and children to create a complete structure
  class EzsigndocumentResponseCompound < EzsigndocumentResponse
    attr_accessor :e_ezsigndocument_steptype

    # The total number of steps in the form filling phase
    attr_accessor :i_ezsigndocument_stepformtotal

    # The current step in the form filling phase
    attr_accessor :i_ezsigndocument_stepformcurrent

    # The total number of steps in the signature filling phase
    attr_accessor :i_ezsigndocument_stepsignaturetotal

    # The current step in the signature phase
    attr_accessor :i_ezsigndocument_stepsignature_current

    attr_accessor :a_obj_ezsignfoldersignerassociationstatus

    attr_accessor :a_obj_ezsigndocumentdependency

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'e_ezsigndocument_steptype' => :'eEzsigndocumentSteptype',
        :'i_ezsigndocument_stepformtotal' => :'iEzsigndocumentStepformtotal',
        :'i_ezsigndocument_stepformcurrent' => :'iEzsigndocumentStepformcurrent',
        :'i_ezsigndocument_stepsignaturetotal' => :'iEzsigndocumentStepsignaturetotal',
        :'i_ezsigndocument_stepsignature_current' => :'iEzsigndocumentStepsignatureCurrent',
        :'a_obj_ezsignfoldersignerassociationstatus' => :'a_objEzsignfoldersignerassociationstatus',
        :'a_obj_ezsigndocumentdependency' => :'a_objEzsigndocumentdependency'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'e_ezsigndocument_steptype' => :'ComputedEEzsigndocumentSteptype',
        :'i_ezsigndocument_stepformtotal' => :'Integer',
        :'i_ezsigndocument_stepformcurrent' => :'Integer',
        :'i_ezsigndocument_stepsignaturetotal' => :'Integer',
        :'i_ezsigndocument_stepsignature_current' => :'Integer',
        :'a_obj_ezsignfoldersignerassociationstatus' => :'Array<CustomEzsignfoldersignerassociationstatusResponse>',
        :'a_obj_ezsigndocumentdependency' => :'Array<EzsigndocumentdependencyResponse>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'EzsigndocumentResponse'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EzmaxApi::EzsigndocumentResponseCompound` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EzmaxApi::EzsigndocumentResponseCompound`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'e_ezsigndocument_steptype')
        self.e_ezsigndocument_steptype = attributes[:'e_ezsigndocument_steptype']
      else
        self.e_ezsigndocument_steptype = nil
      end

      if attributes.key?(:'i_ezsigndocument_stepformtotal')
        self.i_ezsigndocument_stepformtotal = attributes[:'i_ezsigndocument_stepformtotal']
      else
        self.i_ezsigndocument_stepformtotal = nil
      end

      if attributes.key?(:'i_ezsigndocument_stepformcurrent')
        self.i_ezsigndocument_stepformcurrent = attributes[:'i_ezsigndocument_stepformcurrent']
      else
        self.i_ezsigndocument_stepformcurrent = nil
      end

      if attributes.key?(:'i_ezsigndocument_stepsignaturetotal')
        self.i_ezsigndocument_stepsignaturetotal = attributes[:'i_ezsigndocument_stepsignaturetotal']
      else
        self.i_ezsigndocument_stepsignaturetotal = nil
      end

      if attributes.key?(:'i_ezsigndocument_stepsignature_current')
        self.i_ezsigndocument_stepsignature_current = attributes[:'i_ezsigndocument_stepsignature_current']
      else
        self.i_ezsigndocument_stepsignature_current = nil
      end

      if attributes.key?(:'a_obj_ezsignfoldersignerassociationstatus')
        if (value = attributes[:'a_obj_ezsignfoldersignerassociationstatus']).is_a?(Array)
          self.a_obj_ezsignfoldersignerassociationstatus = value
        end
      else
        self.a_obj_ezsignfoldersignerassociationstatus = nil
      end

      if attributes.key?(:'a_obj_ezsigndocumentdependency')
        if (value = attributes[:'a_obj_ezsigndocumentdependency']).is_a?(Array)
          self.a_obj_ezsigndocumentdependency = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = super
      if @e_ezsigndocument_steptype.nil?
        invalid_properties.push('invalid value for "e_ezsigndocument_steptype", e_ezsigndocument_steptype cannot be nil.')
      end

      if @i_ezsigndocument_stepformtotal.nil?
        invalid_properties.push('invalid value for "i_ezsigndocument_stepformtotal", i_ezsigndocument_stepformtotal cannot be nil.')
      end

      if @i_ezsigndocument_stepformcurrent.nil?
        invalid_properties.push('invalid value for "i_ezsigndocument_stepformcurrent", i_ezsigndocument_stepformcurrent cannot be nil.')
      end

      if @i_ezsigndocument_stepsignaturetotal.nil?
        invalid_properties.push('invalid value for "i_ezsigndocument_stepsignaturetotal", i_ezsigndocument_stepsignaturetotal cannot be nil.')
      end

      if @i_ezsigndocument_stepsignature_current.nil?
        invalid_properties.push('invalid value for "i_ezsigndocument_stepsignature_current", i_ezsigndocument_stepsignature_current cannot be nil.')
      end

      if @a_obj_ezsignfoldersignerassociationstatus.nil?
        invalid_properties.push('invalid value for "a_obj_ezsignfoldersignerassociationstatus", a_obj_ezsignfoldersignerassociationstatus cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @e_ezsigndocument_steptype.nil?
      return false if @i_ezsigndocument_stepformtotal.nil?
      return false if @i_ezsigndocument_stepformcurrent.nil?
      return false if @i_ezsigndocument_stepsignaturetotal.nil?
      return false if @i_ezsigndocument_stepsignature_current.nil?
      return false if @a_obj_ezsignfoldersignerassociationstatus.nil?
      true && super
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          e_ezsigndocument_steptype == o.e_ezsigndocument_steptype &&
          i_ezsigndocument_stepformtotal == o.i_ezsigndocument_stepformtotal &&
          i_ezsigndocument_stepformcurrent == o.i_ezsigndocument_stepformcurrent &&
          i_ezsigndocument_stepsignaturetotal == o.i_ezsigndocument_stepsignaturetotal &&
          i_ezsigndocument_stepsignature_current == o.i_ezsigndocument_stepsignature_current &&
          a_obj_ezsignfoldersignerassociationstatus == o.a_obj_ezsignfoldersignerassociationstatus &&
          a_obj_ezsigndocumentdependency == o.a_obj_ezsigndocumentdependency && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [e_ezsigndocument_steptype, i_ezsigndocument_stepformtotal, i_ezsigndocument_stepformcurrent, i_ezsigndocument_stepsignaturetotal, i_ezsigndocument_stepsignature_current, a_obj_ezsignfoldersignerassociationstatus, a_obj_ezsigndocumentdependency].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EzmaxApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
