=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'date'
require 'time'

module EzmaxApi
  # A Custom Dnsrecord Object
  class CustomDnsrecordResponse
    # The type of the Dnsrecord
    attr_accessor :e_dnsrecord_type

    # The validation of the Dnsrecord
    attr_accessor :e_dnsrecord_validation

    # The name of the Dnsrecord
    attr_accessor :s_dnsrecord_name

    # The value of the Dnsrecord
    attr_accessor :s_dnsrecord_value

    # The expected value of the Dnsrecord
    attr_accessor :s_dnsrecord_expectedvalue

    # Whether the Dnsrecord must match or not
    attr_accessor :b_dnsrecord_must_match

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'e_dnsrecord_type' => :'eDnsrecordType',
        :'e_dnsrecord_validation' => :'eDnsrecordValidation',
        :'s_dnsrecord_name' => :'sDnsrecordName',
        :'s_dnsrecord_value' => :'sDnsrecordValue',
        :'s_dnsrecord_expectedvalue' => :'sDnsrecordExpectedvalue',
        :'b_dnsrecord_must_match' => :'bDnsrecordMustMatch'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'e_dnsrecord_type' => :'String',
        :'e_dnsrecord_validation' => :'String',
        :'s_dnsrecord_name' => :'String',
        :'s_dnsrecord_value' => :'String',
        :'s_dnsrecord_expectedvalue' => :'String',
        :'b_dnsrecord_must_match' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EzmaxApi::CustomDnsrecordResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EzmaxApi::CustomDnsrecordResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'e_dnsrecord_type')
        self.e_dnsrecord_type = attributes[:'e_dnsrecord_type']
      else
        self.e_dnsrecord_type = nil
      end

      if attributes.key?(:'e_dnsrecord_validation')
        self.e_dnsrecord_validation = attributes[:'e_dnsrecord_validation']
      else
        self.e_dnsrecord_validation = nil
      end

      if attributes.key?(:'s_dnsrecord_name')
        self.s_dnsrecord_name = attributes[:'s_dnsrecord_name']
      else
        self.s_dnsrecord_name = nil
      end

      if attributes.key?(:'s_dnsrecord_value')
        self.s_dnsrecord_value = attributes[:'s_dnsrecord_value']
      end

      if attributes.key?(:'s_dnsrecord_expectedvalue')
        self.s_dnsrecord_expectedvalue = attributes[:'s_dnsrecord_expectedvalue']
      end

      if attributes.key?(:'b_dnsrecord_must_match')
        self.b_dnsrecord_must_match = attributes[:'b_dnsrecord_must_match']
      else
        self.b_dnsrecord_must_match = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @e_dnsrecord_type.nil?
        invalid_properties.push('invalid value for "e_dnsrecord_type", e_dnsrecord_type cannot be nil.')
      end

      if @e_dnsrecord_validation.nil?
        invalid_properties.push('invalid value for "e_dnsrecord_validation", e_dnsrecord_validation cannot be nil.')
      end

      if @s_dnsrecord_name.nil?
        invalid_properties.push('invalid value for "s_dnsrecord_name", s_dnsrecord_name cannot be nil.')
      end

      if @b_dnsrecord_must_match.nil?
        invalid_properties.push('invalid value for "b_dnsrecord_must_match", b_dnsrecord_must_match cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @e_dnsrecord_type.nil?
      e_dnsrecord_type_validator = EnumAttributeValidator.new('String', ["CNAME", "MX", "TXT"])
      return false unless e_dnsrecord_type_validator.valid?(@e_dnsrecord_type)
      return false if @e_dnsrecord_validation.nil?
      e_dnsrecord_validation_validator = EnumAttributeValidator.new('String', ["Match", "Mismatch", "NotFound"])
      return false unless e_dnsrecord_validation_validator.valid?(@e_dnsrecord_validation)
      return false if @s_dnsrecord_name.nil?
      return false if @b_dnsrecord_must_match.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] e_dnsrecord_type Object to be assigned
    def e_dnsrecord_type=(e_dnsrecord_type)
      validator = EnumAttributeValidator.new('String', ["CNAME", "MX", "TXT"])
      unless validator.valid?(e_dnsrecord_type)
        fail ArgumentError, "invalid value for \"e_dnsrecord_type\", must be one of #{validator.allowable_values}."
      end
      @e_dnsrecord_type = e_dnsrecord_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] e_dnsrecord_validation Object to be assigned
    def e_dnsrecord_validation=(e_dnsrecord_validation)
      validator = EnumAttributeValidator.new('String', ["Match", "Mismatch", "NotFound"])
      unless validator.valid?(e_dnsrecord_validation)
        fail ArgumentError, "invalid value for \"e_dnsrecord_validation\", must be one of #{validator.allowable_values}."
      end
      @e_dnsrecord_validation = e_dnsrecord_validation
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          e_dnsrecord_type == o.e_dnsrecord_type &&
          e_dnsrecord_validation == o.e_dnsrecord_validation &&
          s_dnsrecord_name == o.s_dnsrecord_name &&
          s_dnsrecord_value == o.s_dnsrecord_value &&
          s_dnsrecord_expectedvalue == o.s_dnsrecord_expectedvalue &&
          b_dnsrecord_must_match == o.b_dnsrecord_must_match
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [e_dnsrecord_type, e_dnsrecord_validation, s_dnsrecord_name, s_dnsrecord_value, s_dnsrecord_expectedvalue, b_dnsrecord_must_match].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EzmaxApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
