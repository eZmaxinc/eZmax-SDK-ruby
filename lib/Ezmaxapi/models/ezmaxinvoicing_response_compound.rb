=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module EzmaxApi
  # A Ezmaxinvoicing Object
  class EzmaxinvoicingResponseCompound < EzmaxinvoicingResponse
    attr_accessor :obj_ezmaxinvoicingcontract

    attr_accessor :obj_ezmaxpricing

    attr_accessor :a_obj_ezmaxinvoicingsummaryglobal

    attr_accessor :a_obj_ezmaxinvoicingsummaryexternal

    attr_accessor :a_obj_ezmaxinvoicingsummaryinternal

    attr_accessor :a_obj_ezmaxinvoicingagent

    attr_accessor :a_obj_ezmaxinvoicinguser

    attr_accessor :a_obj_ezmaxinvoicingezsignfolder

    attr_accessor :a_obj_ezmaxinvoicingezsigndocument

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'obj_ezmaxinvoicingcontract' => :'objEzmaxinvoicingcontract',
        :'obj_ezmaxpricing' => :'objEzmaxpricing',
        :'a_obj_ezmaxinvoicingsummaryglobal' => :'a_objEzmaxinvoicingsummaryglobal',
        :'a_obj_ezmaxinvoicingsummaryexternal' => :'a_objEzmaxinvoicingsummaryexternal',
        :'a_obj_ezmaxinvoicingsummaryinternal' => :'a_objEzmaxinvoicingsummaryinternal',
        :'a_obj_ezmaxinvoicingagent' => :'a_objEzmaxinvoicingagent',
        :'a_obj_ezmaxinvoicinguser' => :'a_objEzmaxinvoicinguser',
        :'a_obj_ezmaxinvoicingezsignfolder' => :'a_objEzmaxinvoicingezsignfolder',
        :'a_obj_ezmaxinvoicingezsigndocument' => :'a_objEzmaxinvoicingezsigndocument'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'obj_ezmaxinvoicingcontract' => :'EzmaxinvoicingcontractResponseCompound',
        :'obj_ezmaxpricing' => :'CustomEzmaxpricingResponse',
        :'a_obj_ezmaxinvoicingsummaryglobal' => :'Array<EzmaxinvoicingsummaryglobalResponseCompound>',
        :'a_obj_ezmaxinvoicingsummaryexternal' => :'Array<EzmaxinvoicingsummaryexternalResponseCompound>',
        :'a_obj_ezmaxinvoicingsummaryinternal' => :'Array<EzmaxinvoicingsummaryinternalResponseCompound>',
        :'a_obj_ezmaxinvoicingagent' => :'Array<EzmaxinvoicingagentResponseCompound>',
        :'a_obj_ezmaxinvoicinguser' => :'Array<EzmaxinvoicinguserResponseCompound>',
        :'a_obj_ezmaxinvoicingezsignfolder' => :'Array<CustomEzmaxinvoicingEzsignfolderResponse>',
        :'a_obj_ezmaxinvoicingezsigndocument' => :'Array<CustomEzmaxinvoicingEzsigndocumentResponse>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'EzmaxinvoicingResponse'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EzmaxApi::EzmaxinvoicingResponseCompound` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EzmaxApi::EzmaxinvoicingResponseCompound`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'obj_ezmaxinvoicingcontract')
        self.obj_ezmaxinvoicingcontract = attributes[:'obj_ezmaxinvoicingcontract']
      else
        self.obj_ezmaxinvoicingcontract = nil
      end

      if attributes.key?(:'obj_ezmaxpricing')
        self.obj_ezmaxpricing = attributes[:'obj_ezmaxpricing']
      else
        self.obj_ezmaxpricing = nil
      end

      if attributes.key?(:'a_obj_ezmaxinvoicingsummaryglobal')
        if (value = attributes[:'a_obj_ezmaxinvoicingsummaryglobal']).is_a?(Array)
          self.a_obj_ezmaxinvoicingsummaryglobal = value
        end
      else
        self.a_obj_ezmaxinvoicingsummaryglobal = nil
      end

      if attributes.key?(:'a_obj_ezmaxinvoicingsummaryexternal')
        if (value = attributes[:'a_obj_ezmaxinvoicingsummaryexternal']).is_a?(Array)
          self.a_obj_ezmaxinvoicingsummaryexternal = value
        end
      else
        self.a_obj_ezmaxinvoicingsummaryexternal = nil
      end

      if attributes.key?(:'a_obj_ezmaxinvoicingsummaryinternal')
        if (value = attributes[:'a_obj_ezmaxinvoicingsummaryinternal']).is_a?(Array)
          self.a_obj_ezmaxinvoicingsummaryinternal = value
        end
      else
        self.a_obj_ezmaxinvoicingsummaryinternal = nil
      end

      if attributes.key?(:'a_obj_ezmaxinvoicingagent')
        if (value = attributes[:'a_obj_ezmaxinvoicingagent']).is_a?(Array)
          self.a_obj_ezmaxinvoicingagent = value
        end
      else
        self.a_obj_ezmaxinvoicingagent = nil
      end

      if attributes.key?(:'a_obj_ezmaxinvoicinguser')
        if (value = attributes[:'a_obj_ezmaxinvoicinguser']).is_a?(Array)
          self.a_obj_ezmaxinvoicinguser = value
        end
      else
        self.a_obj_ezmaxinvoicinguser = nil
      end

      if attributes.key?(:'a_obj_ezmaxinvoicingezsignfolder')
        if (value = attributes[:'a_obj_ezmaxinvoicingezsignfolder']).is_a?(Array)
          self.a_obj_ezmaxinvoicingezsignfolder = value
        end
      else
        self.a_obj_ezmaxinvoicingezsignfolder = nil
      end

      if attributes.key?(:'a_obj_ezmaxinvoicingezsigndocument')
        if (value = attributes[:'a_obj_ezmaxinvoicingezsigndocument']).is_a?(Array)
          self.a_obj_ezmaxinvoicingezsigndocument = value
        end
      else
        self.a_obj_ezmaxinvoicingezsigndocument = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = super
      if @obj_ezmaxinvoicingcontract.nil?
        invalid_properties.push('invalid value for "obj_ezmaxinvoicingcontract", obj_ezmaxinvoicingcontract cannot be nil.')
      end

      if @obj_ezmaxpricing.nil?
        invalid_properties.push('invalid value for "obj_ezmaxpricing", obj_ezmaxpricing cannot be nil.')
      end

      if @a_obj_ezmaxinvoicingsummaryglobal.nil?
        invalid_properties.push('invalid value for "a_obj_ezmaxinvoicingsummaryglobal", a_obj_ezmaxinvoicingsummaryglobal cannot be nil.')
      end

      if @a_obj_ezmaxinvoicingsummaryexternal.nil?
        invalid_properties.push('invalid value for "a_obj_ezmaxinvoicingsummaryexternal", a_obj_ezmaxinvoicingsummaryexternal cannot be nil.')
      end

      if @a_obj_ezmaxinvoicingsummaryinternal.nil?
        invalid_properties.push('invalid value for "a_obj_ezmaxinvoicingsummaryinternal", a_obj_ezmaxinvoicingsummaryinternal cannot be nil.')
      end

      if @a_obj_ezmaxinvoicingagent.nil?
        invalid_properties.push('invalid value for "a_obj_ezmaxinvoicingagent", a_obj_ezmaxinvoicingagent cannot be nil.')
      end

      if @a_obj_ezmaxinvoicinguser.nil?
        invalid_properties.push('invalid value for "a_obj_ezmaxinvoicinguser", a_obj_ezmaxinvoicinguser cannot be nil.')
      end

      if @a_obj_ezmaxinvoicingezsignfolder.nil?
        invalid_properties.push('invalid value for "a_obj_ezmaxinvoicingezsignfolder", a_obj_ezmaxinvoicingezsignfolder cannot be nil.')
      end

      if @a_obj_ezmaxinvoicingezsigndocument.nil?
        invalid_properties.push('invalid value for "a_obj_ezmaxinvoicingezsigndocument", a_obj_ezmaxinvoicingezsigndocument cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @obj_ezmaxinvoicingcontract.nil?
      return false if @obj_ezmaxpricing.nil?
      return false if @a_obj_ezmaxinvoicingsummaryglobal.nil?
      return false if @a_obj_ezmaxinvoicingsummaryexternal.nil?
      return false if @a_obj_ezmaxinvoicingsummaryinternal.nil?
      return false if @a_obj_ezmaxinvoicingagent.nil?
      return false if @a_obj_ezmaxinvoicinguser.nil?
      return false if @a_obj_ezmaxinvoicingezsignfolder.nil?
      return false if @a_obj_ezmaxinvoicingezsigndocument.nil?
      true && super
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          obj_ezmaxinvoicingcontract == o.obj_ezmaxinvoicingcontract &&
          obj_ezmaxpricing == o.obj_ezmaxpricing &&
          a_obj_ezmaxinvoicingsummaryglobal == o.a_obj_ezmaxinvoicingsummaryglobal &&
          a_obj_ezmaxinvoicingsummaryexternal == o.a_obj_ezmaxinvoicingsummaryexternal &&
          a_obj_ezmaxinvoicingsummaryinternal == o.a_obj_ezmaxinvoicingsummaryinternal &&
          a_obj_ezmaxinvoicingagent == o.a_obj_ezmaxinvoicingagent &&
          a_obj_ezmaxinvoicinguser == o.a_obj_ezmaxinvoicinguser &&
          a_obj_ezmaxinvoicingezsignfolder == o.a_obj_ezmaxinvoicingezsignfolder &&
          a_obj_ezmaxinvoicingezsigndocument == o.a_obj_ezmaxinvoicingezsigndocument && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [obj_ezmaxinvoicingcontract, obj_ezmaxpricing, a_obj_ezmaxinvoicingsummaryglobal, a_obj_ezmaxinvoicingsummaryexternal, a_obj_ezmaxinvoicingsummaryinternal, a_obj_ezmaxinvoicingagent, a_obj_ezmaxinvoicinguser, a_obj_ezmaxinvoicingezsignfolder, a_obj_ezmaxinvoicingezsigndocument].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EzmaxApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
