=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.2
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module EzmaxApi
  # An Ezsignsignaturepaymentdetail Object
  class EzsignsignaturepaymentdetailRequest
    # The unique ID of the Ezsignsignaturepaymentdetail
    attr_accessor :pki_ezsignsignaturepaymentdetail_id

    # The unique ID of the Glaccountcontainer
    attr_accessor :fki_glaccountcontainer_id

    # A description for the Ezsignsignaturepaymentdetail.
    attr_accessor :t_ezsignsignaturepaymentdetail_description

    # The amount of the for the Ezsignsignaturepaymentdetail
    attr_accessor :d_ezsignsignaturepaymentdetail_amount

    attr_accessor :e_ezsignsignaturepaymentdetail_taxable

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pki_ezsignsignaturepaymentdetail_id' => :'pkiEzsignsignaturepaymentdetailID',
        :'fki_glaccountcontainer_id' => :'fkiGlaccountcontainerID',
        :'t_ezsignsignaturepaymentdetail_description' => :'tEzsignsignaturepaymentdetailDescription',
        :'d_ezsignsignaturepaymentdetail_amount' => :'dEzsignsignaturepaymentdetailAmount',
        :'e_ezsignsignaturepaymentdetail_taxable' => :'eEzsignsignaturepaymentdetailTaxable'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pki_ezsignsignaturepaymentdetail_id' => :'Integer',
        :'fki_glaccountcontainer_id' => :'Integer',
        :'t_ezsignsignaturepaymentdetail_description' => :'String',
        :'d_ezsignsignaturepaymentdetail_amount' => :'String',
        :'e_ezsignsignaturepaymentdetail_taxable' => :'FieldEEzsignsignaturepaymentdetailTaxable'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EzmaxApi::EzsignsignaturepaymentdetailRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EzmaxApi::EzsignsignaturepaymentdetailRequest`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pki_ezsignsignaturepaymentdetail_id')
        self.pki_ezsignsignaturepaymentdetail_id = attributes[:'pki_ezsignsignaturepaymentdetail_id']
      end

      if attributes.key?(:'fki_glaccountcontainer_id')
        self.fki_glaccountcontainer_id = attributes[:'fki_glaccountcontainer_id']
      end

      if attributes.key?(:'t_ezsignsignaturepaymentdetail_description')
        self.t_ezsignsignaturepaymentdetail_description = attributes[:'t_ezsignsignaturepaymentdetail_description']
      else
        self.t_ezsignsignaturepaymentdetail_description = nil
      end

      if attributes.key?(:'d_ezsignsignaturepaymentdetail_amount')
        self.d_ezsignsignaturepaymentdetail_amount = attributes[:'d_ezsignsignaturepaymentdetail_amount']
      else
        self.d_ezsignsignaturepaymentdetail_amount = nil
      end

      if attributes.key?(:'e_ezsignsignaturepaymentdetail_taxable')
        self.e_ezsignsignaturepaymentdetail_taxable = attributes[:'e_ezsignsignaturepaymentdetail_taxable']
      else
        self.e_ezsignsignaturepaymentdetail_taxable = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@pki_ezsignsignaturepaymentdetail_id.nil? && @pki_ezsignsignaturepaymentdetail_id > 65535
        invalid_properties.push('invalid value for "pki_ezsignsignaturepaymentdetail_id", must be smaller than or equal to 65535.')
      end

      if !@pki_ezsignsignaturepaymentdetail_id.nil? && @pki_ezsignsignaturepaymentdetail_id < 0
        invalid_properties.push('invalid value for "pki_ezsignsignaturepaymentdetail_id", must be greater than or equal to 0.')
      end

      if !@fki_glaccountcontainer_id.nil? && @fki_glaccountcontainer_id < 0
        invalid_properties.push('invalid value for "fki_glaccountcontainer_id", must be greater than or equal to 0.')
      end

      if @t_ezsignsignaturepaymentdetail_description.nil?
        invalid_properties.push('invalid value for "t_ezsignsignaturepaymentdetail_description", t_ezsignsignaturepaymentdetail_description cannot be nil.')
      end

      if @d_ezsignsignaturepaymentdetail_amount.nil?
        invalid_properties.push('invalid value for "d_ezsignsignaturepaymentdetail_amount", d_ezsignsignaturepaymentdetail_amount cannot be nil.')
      end

      pattern = Regexp.new(/^-{0,1}[\d]{1,9}?\.[\d]{2}$/)
      if @d_ezsignsignaturepaymentdetail_amount !~ pattern
        invalid_properties.push("invalid value for \"d_ezsignsignaturepaymentdetail_amount\", must conform to the pattern #{pattern}.")
      end

      if @e_ezsignsignaturepaymentdetail_taxable.nil?
        invalid_properties.push('invalid value for "e_ezsignsignaturepaymentdetail_taxable", e_ezsignsignaturepaymentdetail_taxable cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if !@pki_ezsignsignaturepaymentdetail_id.nil? && @pki_ezsignsignaturepaymentdetail_id > 65535
      return false if !@pki_ezsignsignaturepaymentdetail_id.nil? && @pki_ezsignsignaturepaymentdetail_id < 0
      return false if !@fki_glaccountcontainer_id.nil? && @fki_glaccountcontainer_id < 0
      return false if @t_ezsignsignaturepaymentdetail_description.nil?
      return false if @d_ezsignsignaturepaymentdetail_amount.nil?
      return false if @d_ezsignsignaturepaymentdetail_amount !~ Regexp.new(/^-{0,1}[\d]{1,9}?\.[\d]{2}$/)
      return false if @e_ezsignsignaturepaymentdetail_taxable.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] pki_ezsignsignaturepaymentdetail_id Value to be assigned
    def pki_ezsignsignaturepaymentdetail_id=(pki_ezsignsignaturepaymentdetail_id)
      if pki_ezsignsignaturepaymentdetail_id.nil?
        fail ArgumentError, 'pki_ezsignsignaturepaymentdetail_id cannot be nil'
      end

      if pki_ezsignsignaturepaymentdetail_id > 65535
        fail ArgumentError, 'invalid value for "pki_ezsignsignaturepaymentdetail_id", must be smaller than or equal to 65535.'
      end

      if pki_ezsignsignaturepaymentdetail_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignsignaturepaymentdetail_id", must be greater than or equal to 0.'
      end

      @pki_ezsignsignaturepaymentdetail_id = pki_ezsignsignaturepaymentdetail_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_glaccountcontainer_id Value to be assigned
    def fki_glaccountcontainer_id=(fki_glaccountcontainer_id)
      if fki_glaccountcontainer_id.nil?
        fail ArgumentError, 'fki_glaccountcontainer_id cannot be nil'
      end

      if fki_glaccountcontainer_id < 0
        fail ArgumentError, 'invalid value for "fki_glaccountcontainer_id", must be greater than or equal to 0.'
      end

      @fki_glaccountcontainer_id = fki_glaccountcontainer_id
    end

    # Custom attribute writer method with validation
    # @param [Object] t_ezsignsignaturepaymentdetail_description Value to be assigned
    def t_ezsignsignaturepaymentdetail_description=(t_ezsignsignaturepaymentdetail_description)
      if t_ezsignsignaturepaymentdetail_description.nil?
        fail ArgumentError, 't_ezsignsignaturepaymentdetail_description cannot be nil'
      end

      @t_ezsignsignaturepaymentdetail_description = t_ezsignsignaturepaymentdetail_description
    end

    # Custom attribute writer method with validation
    # @param [Object] d_ezsignsignaturepaymentdetail_amount Value to be assigned
    def d_ezsignsignaturepaymentdetail_amount=(d_ezsignsignaturepaymentdetail_amount)
      if d_ezsignsignaturepaymentdetail_amount.nil?
        fail ArgumentError, 'd_ezsignsignaturepaymentdetail_amount cannot be nil'
      end

      pattern = Regexp.new(/^-{0,1}[\d]{1,9}?\.[\d]{2}$/)
      if d_ezsignsignaturepaymentdetail_amount !~ pattern
        fail ArgumentError, "invalid value for \"d_ezsignsignaturepaymentdetail_amount\", must conform to the pattern #{pattern}."
      end

      @d_ezsignsignaturepaymentdetail_amount = d_ezsignsignaturepaymentdetail_amount
    end

    # Custom attribute writer method with validation
    # @param [Object] e_ezsignsignaturepaymentdetail_taxable Value to be assigned
    def e_ezsignsignaturepaymentdetail_taxable=(e_ezsignsignaturepaymentdetail_taxable)
      if e_ezsignsignaturepaymentdetail_taxable.nil?
        fail ArgumentError, 'e_ezsignsignaturepaymentdetail_taxable cannot be nil'
      end

      @e_ezsignsignaturepaymentdetail_taxable = e_ezsignsignaturepaymentdetail_taxable
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pki_ezsignsignaturepaymentdetail_id == o.pki_ezsignsignaturepaymentdetail_id &&
          fki_glaccountcontainer_id == o.fki_glaccountcontainer_id &&
          t_ezsignsignaturepaymentdetail_description == o.t_ezsignsignaturepaymentdetail_description &&
          d_ezsignsignaturepaymentdetail_amount == o.d_ezsignsignaturepaymentdetail_amount &&
          e_ezsignsignaturepaymentdetail_taxable == o.e_ezsignsignaturepaymentdetail_taxable
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pki_ezsignsignaturepaymentdetail_id, fki_glaccountcontainer_id, t_ezsignsignaturepaymentdetail_description, d_ezsignsignaturepaymentdetail_amount, e_ezsignsignaturepaymentdetail_taxable].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EzmaxApi.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
