=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.0
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'date'
require 'time'

module EzmaxApi
  # A Ezsignfoldertype Object
  class EzsignfoldertypeResponse
    # The unique ID of the Ezsignfoldertype.
    attr_accessor :pki_ezsignfoldertype_id

    attr_accessor :obj_ezsignfoldertype_name

    # The unique ID of the Branding
    attr_accessor :fki_branding_id

    # The unique ID of the Billingentityinternal.
    attr_accessor :fki_billingentityinternal_id

    # The unique ID of the Usergroup
    attr_accessor :fki_usergroup_id

    # The unique ID of the Usergroup
    attr_accessor :fki_usergroup_id_restricted

    # The unique ID of the Ezsigntsarequirement.  Determine if a Time Stamping Authority should add a timestamp on each of the signature. Valid values:  |Value|Description| |-|-| |1|No. TSA Timestamping will requested. This will make all signatures a lot faster since no round-trip to the TSA server will be required. Timestamping will be made using eZsign server's time.| |2|Best effort. Timestamping from a Time Stamping Authority will be requested but is not mandatory. In the very improbable case it cannot be completed, the timestamping will be made using eZsign server's time. **Additional fee applies**| |3|Mandatory. Timestamping from a Time Stamping Authority will be requested and is mandatory. In the very improbable case it cannot be completed, the signature will fail and the user will be asked to retry. **Additional fee applies**|
    attr_accessor :fki_ezsigntsarequirement_id

    # The Description of the Branding in the language of the requester
    attr_accessor :s_branding_description_x

    # The description of the Billingentityinternal in the language of the requester
    attr_accessor :s_billingentityinternal_description_x

    # The description of the Ezsigntsarequirement in the language of the requester
    attr_accessor :s_ezsigntsarequirement_description_x

    # The email address.
    attr_accessor :s_email_address_signed

    # The email address.
    attr_accessor :s_email_address_summary

    # The Name of the Usergroup in the language of the requester
    attr_accessor :s_usergroup_name_x

    # The Name of the Usergroup in the language of the requester
    attr_accessor :s_usergroup_name_x_restricted

    attr_accessor :e_ezsignfoldertype_privacylevel

    attr_accessor :e_ezsignfoldertype_sendreminderfrequency

    # The number of days before the archival of Ezsignfolders created using this Ezsignfoldertype
    attr_accessor :i_ezsignfoldertype_archivaldays

    attr_accessor :e_ezsignfoldertype_disposal

    # The number of days after the archival before the disposal of the Ezsignfolder
    attr_accessor :i_ezsignfoldertype_disposaldays

    # The number of days to get all Ezsignsignatures
    attr_accessor :i_ezsignfoldertype_deadlinedays

    # Wheter if delegation of signature is allowed to another user or not
    attr_accessor :b_ezsignfoldertype_delegate

    # Wheter if Reassignment of signature is allowed to another signatory or not
    attr_accessor :b_ezsignfoldertype_reassign

    # Whether we send the Ezsigndocument and the proof as attachment in the email
    attr_accessor :b_ezsignfoldertype_sendattatchmentsigner

    # Whether we send the signed Ezsigndocument to the Ezsigndocument's owner
    attr_accessor :b_ezsignfoldertype_sendsignedtodocumentowner

    # Whether we send the signed Ezsigndocument to the Ezsignfolder's owner
    attr_accessor :b_ezsignfoldertype_sendsignedtofolderowner

    # Whether we send the signed Ezsigndocument to the Usergroup that has acces to all Ezsignfolders
    attr_accessor :b_ezsignfoldertype_sendsignedtofullgroup

    # Whether we send the signed Ezsigndocument to the Usergroup that has acces to only their own Ezsignfolders
    attr_accessor :b_ezsignfoldertype_sendsignedtolimitedgroup

    # Whether we send the signed Ezsigndocument to the colleagues
    attr_accessor :b_ezsignfoldertype_sendsignedtocolleague

    # Whether we send the summary to the Ezsigndocument's owner
    attr_accessor :b_ezsignfoldertype_sendsummarytodocumentowner

    # Whether we send the summary to the Ezsignfolder's owner
    attr_accessor :b_ezsignfoldertype_sendsummarytofolderowner

    # Whether we send the summary to the Usergroup that has acces to all Ezsignfolders
    attr_accessor :b_ezsignfoldertype_sendsummarytofullgroup

    # Whether we send the summary to the Usergroup that has acces to only their own Ezsignfolders
    attr_accessor :b_ezsignfoldertype_sendsummarytolimitedgroup

    # Whether we send the summary to the colleagues
    attr_accessor :b_ezsignfoldertype_sendsummarytocolleague

    # Whether we include the proof with the signed Ezsigndocument for Ezsignsigners
    attr_accessor :b_ezsignfoldertype_includeproofsigner

    # Whether we include the proof with the signed Ezsigndocument for users
    attr_accessor :b_ezsignfoldertype_includeproofuser

    # Whether the Ezsignfoldertype is active or not
    attr_accessor :b_ezsignfoldertype_isactive

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'pki_ezsignfoldertype_id' => :'pkiEzsignfoldertypeID',
        :'obj_ezsignfoldertype_name' => :'objEzsignfoldertypeName',
        :'fki_branding_id' => :'fkiBrandingID',
        :'fki_billingentityinternal_id' => :'fkiBillingentityinternalID',
        :'fki_usergroup_id' => :'fkiUsergroupID',
        :'fki_usergroup_id_restricted' => :'fkiUsergroupIDRestricted',
        :'fki_ezsigntsarequirement_id' => :'fkiEzsigntsarequirementID',
        :'s_branding_description_x' => :'sBrandingDescriptionX',
        :'s_billingentityinternal_description_x' => :'sBillingentityinternalDescriptionX',
        :'s_ezsigntsarequirement_description_x' => :'sEzsigntsarequirementDescriptionX',
        :'s_email_address_signed' => :'sEmailAddressSigned',
        :'s_email_address_summary' => :'sEmailAddressSummary',
        :'s_usergroup_name_x' => :'sUsergroupNameX',
        :'s_usergroup_name_x_restricted' => :'sUsergroupNameXRestricted',
        :'e_ezsignfoldertype_privacylevel' => :'eEzsignfoldertypePrivacylevel',
        :'e_ezsignfoldertype_sendreminderfrequency' => :'eEzsignfoldertypeSendreminderfrequency',
        :'i_ezsignfoldertype_archivaldays' => :'iEzsignfoldertypeArchivaldays',
        :'e_ezsignfoldertype_disposal' => :'eEzsignfoldertypeDisposal',
        :'i_ezsignfoldertype_disposaldays' => :'iEzsignfoldertypeDisposaldays',
        :'i_ezsignfoldertype_deadlinedays' => :'iEzsignfoldertypeDeadlinedays',
        :'b_ezsignfoldertype_delegate' => :'bEzsignfoldertypeDelegate',
        :'b_ezsignfoldertype_reassign' => :'bEzsignfoldertypeReassign',
        :'b_ezsignfoldertype_sendattatchmentsigner' => :'bEzsignfoldertypeSendattatchmentsigner',
        :'b_ezsignfoldertype_sendsignedtodocumentowner' => :'bEzsignfoldertypeSendsignedtodocumentowner',
        :'b_ezsignfoldertype_sendsignedtofolderowner' => :'bEzsignfoldertypeSendsignedtofolderowner',
        :'b_ezsignfoldertype_sendsignedtofullgroup' => :'bEzsignfoldertypeSendsignedtofullgroup',
        :'b_ezsignfoldertype_sendsignedtolimitedgroup' => :'bEzsignfoldertypeSendsignedtolimitedgroup',
        :'b_ezsignfoldertype_sendsignedtocolleague' => :'bEzsignfoldertypeSendsignedtocolleague',
        :'b_ezsignfoldertype_sendsummarytodocumentowner' => :'bEzsignfoldertypeSendsummarytodocumentowner',
        :'b_ezsignfoldertype_sendsummarytofolderowner' => :'bEzsignfoldertypeSendsummarytofolderowner',
        :'b_ezsignfoldertype_sendsummarytofullgroup' => :'bEzsignfoldertypeSendsummarytofullgroup',
        :'b_ezsignfoldertype_sendsummarytolimitedgroup' => :'bEzsignfoldertypeSendsummarytolimitedgroup',
        :'b_ezsignfoldertype_sendsummarytocolleague' => :'bEzsignfoldertypeSendsummarytocolleague',
        :'b_ezsignfoldertype_includeproofsigner' => :'bEzsignfoldertypeIncludeproofsigner',
        :'b_ezsignfoldertype_includeproofuser' => :'bEzsignfoldertypeIncludeproofuser',
        :'b_ezsignfoldertype_isactive' => :'bEzsignfoldertypeIsactive'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'pki_ezsignfoldertype_id' => :'Integer',
        :'obj_ezsignfoldertype_name' => :'MultilingualEzsignfoldertypeName',
        :'fki_branding_id' => :'Integer',
        :'fki_billingentityinternal_id' => :'Integer',
        :'fki_usergroup_id' => :'Integer',
        :'fki_usergroup_id_restricted' => :'Integer',
        :'fki_ezsigntsarequirement_id' => :'Integer',
        :'s_branding_description_x' => :'String',
        :'s_billingentityinternal_description_x' => :'String',
        :'s_ezsigntsarequirement_description_x' => :'String',
        :'s_email_address_signed' => :'String',
        :'s_email_address_summary' => :'String',
        :'s_usergroup_name_x' => :'String',
        :'s_usergroup_name_x_restricted' => :'String',
        :'e_ezsignfoldertype_privacylevel' => :'FieldEEzsignfoldertypePrivacylevel',
        :'e_ezsignfoldertype_sendreminderfrequency' => :'FieldEEzsignfoldertypeSendreminderfrequency',
        :'i_ezsignfoldertype_archivaldays' => :'Integer',
        :'e_ezsignfoldertype_disposal' => :'FieldEEzsignfoldertypeDisposal',
        :'i_ezsignfoldertype_disposaldays' => :'Integer',
        :'i_ezsignfoldertype_deadlinedays' => :'Integer',
        :'b_ezsignfoldertype_delegate' => :'Boolean',
        :'b_ezsignfoldertype_reassign' => :'Boolean',
        :'b_ezsignfoldertype_sendattatchmentsigner' => :'Boolean',
        :'b_ezsignfoldertype_sendsignedtodocumentowner' => :'Boolean',
        :'b_ezsignfoldertype_sendsignedtofolderowner' => :'Boolean',
        :'b_ezsignfoldertype_sendsignedtofullgroup' => :'Boolean',
        :'b_ezsignfoldertype_sendsignedtolimitedgroup' => :'Boolean',
        :'b_ezsignfoldertype_sendsignedtocolleague' => :'Boolean',
        :'b_ezsignfoldertype_sendsummarytodocumentowner' => :'Boolean',
        :'b_ezsignfoldertype_sendsummarytofolderowner' => :'Boolean',
        :'b_ezsignfoldertype_sendsummarytofullgroup' => :'Boolean',
        :'b_ezsignfoldertype_sendsummarytolimitedgroup' => :'Boolean',
        :'b_ezsignfoldertype_sendsummarytocolleague' => :'Boolean',
        :'b_ezsignfoldertype_includeproofsigner' => :'Boolean',
        :'b_ezsignfoldertype_includeproofuser' => :'Boolean',
        :'b_ezsignfoldertype_isactive' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `EzmaxApi::EzsignfoldertypeResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `EzmaxApi::EzsignfoldertypeResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'pki_ezsignfoldertype_id')
        self.pki_ezsignfoldertype_id = attributes[:'pki_ezsignfoldertype_id']
      else
        self.pki_ezsignfoldertype_id = nil
      end

      if attributes.key?(:'obj_ezsignfoldertype_name')
        self.obj_ezsignfoldertype_name = attributes[:'obj_ezsignfoldertype_name']
      else
        self.obj_ezsignfoldertype_name = nil
      end

      if attributes.key?(:'fki_branding_id')
        self.fki_branding_id = attributes[:'fki_branding_id']
      else
        self.fki_branding_id = nil
      end

      if attributes.key?(:'fki_billingentityinternal_id')
        self.fki_billingentityinternal_id = attributes[:'fki_billingentityinternal_id']
      end

      if attributes.key?(:'fki_usergroup_id')
        self.fki_usergroup_id = attributes[:'fki_usergroup_id']
      end

      if attributes.key?(:'fki_usergroup_id_restricted')
        self.fki_usergroup_id_restricted = attributes[:'fki_usergroup_id_restricted']
      end

      if attributes.key?(:'fki_ezsigntsarequirement_id')
        self.fki_ezsigntsarequirement_id = attributes[:'fki_ezsigntsarequirement_id']
      end

      if attributes.key?(:'s_branding_description_x')
        self.s_branding_description_x = attributes[:'s_branding_description_x']
      else
        self.s_branding_description_x = nil
      end

      if attributes.key?(:'s_billingentityinternal_description_x')
        self.s_billingentityinternal_description_x = attributes[:'s_billingentityinternal_description_x']
      end

      if attributes.key?(:'s_ezsigntsarequirement_description_x')
        self.s_ezsigntsarequirement_description_x = attributes[:'s_ezsigntsarequirement_description_x']
      end

      if attributes.key?(:'s_email_address_signed')
        self.s_email_address_signed = attributes[:'s_email_address_signed']
      end

      if attributes.key?(:'s_email_address_summary')
        self.s_email_address_summary = attributes[:'s_email_address_summary']
      end

      if attributes.key?(:'s_usergroup_name_x')
        self.s_usergroup_name_x = attributes[:'s_usergroup_name_x']
      end

      if attributes.key?(:'s_usergroup_name_x_restricted')
        self.s_usergroup_name_x_restricted = attributes[:'s_usergroup_name_x_restricted']
      end

      if attributes.key?(:'e_ezsignfoldertype_privacylevel')
        self.e_ezsignfoldertype_privacylevel = attributes[:'e_ezsignfoldertype_privacylevel']
      else
        self.e_ezsignfoldertype_privacylevel = nil
      end

      if attributes.key?(:'e_ezsignfoldertype_sendreminderfrequency')
        self.e_ezsignfoldertype_sendreminderfrequency = attributes[:'e_ezsignfoldertype_sendreminderfrequency']
      end

      if attributes.key?(:'i_ezsignfoldertype_archivaldays')
        self.i_ezsignfoldertype_archivaldays = attributes[:'i_ezsignfoldertype_archivaldays']
      else
        self.i_ezsignfoldertype_archivaldays = nil
      end

      if attributes.key?(:'e_ezsignfoldertype_disposal')
        self.e_ezsignfoldertype_disposal = attributes[:'e_ezsignfoldertype_disposal']
      else
        self.e_ezsignfoldertype_disposal = nil
      end

      if attributes.key?(:'i_ezsignfoldertype_disposaldays')
        self.i_ezsignfoldertype_disposaldays = attributes[:'i_ezsignfoldertype_disposaldays']
      end

      if attributes.key?(:'i_ezsignfoldertype_deadlinedays')
        self.i_ezsignfoldertype_deadlinedays = attributes[:'i_ezsignfoldertype_deadlinedays']
      else
        self.i_ezsignfoldertype_deadlinedays = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_delegate')
        self.b_ezsignfoldertype_delegate = attributes[:'b_ezsignfoldertype_delegate']
      end

      if attributes.key?(:'b_ezsignfoldertype_reassign')
        self.b_ezsignfoldertype_reassign = attributes[:'b_ezsignfoldertype_reassign']
      end

      if attributes.key?(:'b_ezsignfoldertype_sendattatchmentsigner')
        self.b_ezsignfoldertype_sendattatchmentsigner = attributes[:'b_ezsignfoldertype_sendattatchmentsigner']
      else
        self.b_ezsignfoldertype_sendattatchmentsigner = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsignedtodocumentowner')
        self.b_ezsignfoldertype_sendsignedtodocumentowner = attributes[:'b_ezsignfoldertype_sendsignedtodocumentowner']
      else
        self.b_ezsignfoldertype_sendsignedtodocumentowner = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsignedtofolderowner')
        self.b_ezsignfoldertype_sendsignedtofolderowner = attributes[:'b_ezsignfoldertype_sendsignedtofolderowner']
      else
        self.b_ezsignfoldertype_sendsignedtofolderowner = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsignedtofullgroup')
        self.b_ezsignfoldertype_sendsignedtofullgroup = attributes[:'b_ezsignfoldertype_sendsignedtofullgroup']
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsignedtolimitedgroup')
        self.b_ezsignfoldertype_sendsignedtolimitedgroup = attributes[:'b_ezsignfoldertype_sendsignedtolimitedgroup']
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsignedtocolleague')
        self.b_ezsignfoldertype_sendsignedtocolleague = attributes[:'b_ezsignfoldertype_sendsignedtocolleague']
      else
        self.b_ezsignfoldertype_sendsignedtocolleague = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsummarytodocumentowner')
        self.b_ezsignfoldertype_sendsummarytodocumentowner = attributes[:'b_ezsignfoldertype_sendsummarytodocumentowner']
      else
        self.b_ezsignfoldertype_sendsummarytodocumentowner = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsummarytofolderowner')
        self.b_ezsignfoldertype_sendsummarytofolderowner = attributes[:'b_ezsignfoldertype_sendsummarytofolderowner']
      else
        self.b_ezsignfoldertype_sendsummarytofolderowner = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsummarytofullgroup')
        self.b_ezsignfoldertype_sendsummarytofullgroup = attributes[:'b_ezsignfoldertype_sendsummarytofullgroup']
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsummarytolimitedgroup')
        self.b_ezsignfoldertype_sendsummarytolimitedgroup = attributes[:'b_ezsignfoldertype_sendsummarytolimitedgroup']
      end

      if attributes.key?(:'b_ezsignfoldertype_sendsummarytocolleague')
        self.b_ezsignfoldertype_sendsummarytocolleague = attributes[:'b_ezsignfoldertype_sendsummarytocolleague']
      else
        self.b_ezsignfoldertype_sendsummarytocolleague = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_includeproofsigner')
        self.b_ezsignfoldertype_includeproofsigner = attributes[:'b_ezsignfoldertype_includeproofsigner']
      else
        self.b_ezsignfoldertype_includeproofsigner = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_includeproofuser')
        self.b_ezsignfoldertype_includeproofuser = attributes[:'b_ezsignfoldertype_includeproofuser']
      else
        self.b_ezsignfoldertype_includeproofuser = nil
      end

      if attributes.key?(:'b_ezsignfoldertype_isactive')
        self.b_ezsignfoldertype_isactive = attributes[:'b_ezsignfoldertype_isactive']
      else
        self.b_ezsignfoldertype_isactive = nil
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @pki_ezsignfoldertype_id.nil?
        invalid_properties.push('invalid value for "pki_ezsignfoldertype_id", pki_ezsignfoldertype_id cannot be nil.')
      end

      if @pki_ezsignfoldertype_id < 0
        invalid_properties.push('invalid value for "pki_ezsignfoldertype_id", must be greater than or equal to 0.')
      end

      if @obj_ezsignfoldertype_name.nil?
        invalid_properties.push('invalid value for "obj_ezsignfoldertype_name", obj_ezsignfoldertype_name cannot be nil.')
      end

      if @fki_branding_id.nil?
        invalid_properties.push('invalid value for "fki_branding_id", fki_branding_id cannot be nil.')
      end

      if @fki_branding_id < 0
        invalid_properties.push('invalid value for "fki_branding_id", must be greater than or equal to 0.')
      end

      if !@fki_billingentityinternal_id.nil? && @fki_billingentityinternal_id < 0
        invalid_properties.push('invalid value for "fki_billingentityinternal_id", must be greater than or equal to 0.')
      end

      if !@fki_usergroup_id.nil? && @fki_usergroup_id > 255
        invalid_properties.push('invalid value for "fki_usergroup_id", must be smaller than or equal to 255.')
      end

      if !@fki_usergroup_id.nil? && @fki_usergroup_id < 0
        invalid_properties.push('invalid value for "fki_usergroup_id", must be greater than or equal to 0.')
      end

      if !@fki_usergroup_id_restricted.nil? && @fki_usergroup_id_restricted > 255
        invalid_properties.push('invalid value for "fki_usergroup_id_restricted", must be smaller than or equal to 255.')
      end

      if !@fki_usergroup_id_restricted.nil? && @fki_usergroup_id_restricted < 0
        invalid_properties.push('invalid value for "fki_usergroup_id_restricted", must be greater than or equal to 0.')
      end

      if !@fki_ezsigntsarequirement_id.nil? && @fki_ezsigntsarequirement_id > 3
        invalid_properties.push('invalid value for "fki_ezsigntsarequirement_id", must be smaller than or equal to 3.')
      end

      if !@fki_ezsigntsarequirement_id.nil? && @fki_ezsigntsarequirement_id < 1
        invalid_properties.push('invalid value for "fki_ezsigntsarequirement_id", must be greater than or equal to 1.')
      end

      if @s_branding_description_x.nil?
        invalid_properties.push('invalid value for "s_branding_description_x", s_branding_description_x cannot be nil.')
      end

      pattern = Regexp.new(/^.{0,50}$/)
      if !@s_usergroup_name_x.nil? && @s_usergroup_name_x !~ pattern
        invalid_properties.push("invalid value for \"s_usergroup_name_x\", must conform to the pattern #{pattern}.")
      end

      pattern = Regexp.new(/^.{0,50}$/)
      if !@s_usergroup_name_x_restricted.nil? && @s_usergroup_name_x_restricted !~ pattern
        invalid_properties.push("invalid value for \"s_usergroup_name_x_restricted\", must conform to the pattern #{pattern}.")
      end

      if @e_ezsignfoldertype_privacylevel.nil?
        invalid_properties.push('invalid value for "e_ezsignfoldertype_privacylevel", e_ezsignfoldertype_privacylevel cannot be nil.')
      end

      if @i_ezsignfoldertype_archivaldays.nil?
        invalid_properties.push('invalid value for "i_ezsignfoldertype_archivaldays", i_ezsignfoldertype_archivaldays cannot be nil.')
      end

      if @i_ezsignfoldertype_archivaldays > 180
        invalid_properties.push('invalid value for "i_ezsignfoldertype_archivaldays", must be smaller than or equal to 180.')
      end

      if @i_ezsignfoldertype_archivaldays < 0
        invalid_properties.push('invalid value for "i_ezsignfoldertype_archivaldays", must be greater than or equal to 0.')
      end

      if @e_ezsignfoldertype_disposal.nil?
        invalid_properties.push('invalid value for "e_ezsignfoldertype_disposal", e_ezsignfoldertype_disposal cannot be nil.')
      end

      if !@i_ezsignfoldertype_disposaldays.nil? && @i_ezsignfoldertype_disposaldays > 9999
        invalid_properties.push('invalid value for "i_ezsignfoldertype_disposaldays", must be smaller than or equal to 9999.')
      end

      if !@i_ezsignfoldertype_disposaldays.nil? && @i_ezsignfoldertype_disposaldays < 0
        invalid_properties.push('invalid value for "i_ezsignfoldertype_disposaldays", must be greater than or equal to 0.')
      end

      if @i_ezsignfoldertype_deadlinedays.nil?
        invalid_properties.push('invalid value for "i_ezsignfoldertype_deadlinedays", i_ezsignfoldertype_deadlinedays cannot be nil.')
      end

      if @i_ezsignfoldertype_deadlinedays > 60
        invalid_properties.push('invalid value for "i_ezsignfoldertype_deadlinedays", must be smaller than or equal to 60.')
      end

      if @i_ezsignfoldertype_deadlinedays < 1
        invalid_properties.push('invalid value for "i_ezsignfoldertype_deadlinedays", must be greater than or equal to 1.')
      end

      if @b_ezsignfoldertype_sendattatchmentsigner.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_sendattatchmentsigner", b_ezsignfoldertype_sendattatchmentsigner cannot be nil.')
      end

      if @b_ezsignfoldertype_sendsignedtodocumentowner.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_sendsignedtodocumentowner", b_ezsignfoldertype_sendsignedtodocumentowner cannot be nil.')
      end

      if @b_ezsignfoldertype_sendsignedtofolderowner.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_sendsignedtofolderowner", b_ezsignfoldertype_sendsignedtofolderowner cannot be nil.')
      end

      if @b_ezsignfoldertype_sendsignedtocolleague.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_sendsignedtocolleague", b_ezsignfoldertype_sendsignedtocolleague cannot be nil.')
      end

      if @b_ezsignfoldertype_sendsummarytodocumentowner.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_sendsummarytodocumentowner", b_ezsignfoldertype_sendsummarytodocumentowner cannot be nil.')
      end

      if @b_ezsignfoldertype_sendsummarytofolderowner.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_sendsummarytofolderowner", b_ezsignfoldertype_sendsummarytofolderowner cannot be nil.')
      end

      if @b_ezsignfoldertype_sendsummarytocolleague.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_sendsummarytocolleague", b_ezsignfoldertype_sendsummarytocolleague cannot be nil.')
      end

      if @b_ezsignfoldertype_includeproofsigner.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_includeproofsigner", b_ezsignfoldertype_includeproofsigner cannot be nil.')
      end

      if @b_ezsignfoldertype_includeproofuser.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_includeproofuser", b_ezsignfoldertype_includeproofuser cannot be nil.')
      end

      if @b_ezsignfoldertype_isactive.nil?
        invalid_properties.push('invalid value for "b_ezsignfoldertype_isactive", b_ezsignfoldertype_isactive cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @pki_ezsignfoldertype_id.nil?
      return false if @pki_ezsignfoldertype_id < 0
      return false if @obj_ezsignfoldertype_name.nil?
      return false if @fki_branding_id.nil?
      return false if @fki_branding_id < 0
      return false if !@fki_billingentityinternal_id.nil? && @fki_billingentityinternal_id < 0
      return false if !@fki_usergroup_id.nil? && @fki_usergroup_id > 255
      return false if !@fki_usergroup_id.nil? && @fki_usergroup_id < 0
      return false if !@fki_usergroup_id_restricted.nil? && @fki_usergroup_id_restricted > 255
      return false if !@fki_usergroup_id_restricted.nil? && @fki_usergroup_id_restricted < 0
      return false if !@fki_ezsigntsarequirement_id.nil? && @fki_ezsigntsarequirement_id > 3
      return false if !@fki_ezsigntsarequirement_id.nil? && @fki_ezsigntsarequirement_id < 1
      return false if @s_branding_description_x.nil?
      return false if !@s_usergroup_name_x.nil? && @s_usergroup_name_x !~ Regexp.new(/^.{0,50}$/)
      return false if !@s_usergroup_name_x_restricted.nil? && @s_usergroup_name_x_restricted !~ Regexp.new(/^.{0,50}$/)
      return false if @e_ezsignfoldertype_privacylevel.nil?
      return false if @i_ezsignfoldertype_archivaldays.nil?
      return false if @i_ezsignfoldertype_archivaldays > 180
      return false if @i_ezsignfoldertype_archivaldays < 0
      return false if @e_ezsignfoldertype_disposal.nil?
      return false if !@i_ezsignfoldertype_disposaldays.nil? && @i_ezsignfoldertype_disposaldays > 9999
      return false if !@i_ezsignfoldertype_disposaldays.nil? && @i_ezsignfoldertype_disposaldays < 0
      return false if @i_ezsignfoldertype_deadlinedays.nil?
      return false if @i_ezsignfoldertype_deadlinedays > 60
      return false if @i_ezsignfoldertype_deadlinedays < 1
      return false if @b_ezsignfoldertype_sendattatchmentsigner.nil?
      return false if @b_ezsignfoldertype_sendsignedtodocumentowner.nil?
      return false if @b_ezsignfoldertype_sendsignedtofolderowner.nil?
      return false if @b_ezsignfoldertype_sendsignedtocolleague.nil?
      return false if @b_ezsignfoldertype_sendsummarytodocumentowner.nil?
      return false if @b_ezsignfoldertype_sendsummarytofolderowner.nil?
      return false if @b_ezsignfoldertype_sendsummarytocolleague.nil?
      return false if @b_ezsignfoldertype_includeproofsigner.nil?
      return false if @b_ezsignfoldertype_includeproofuser.nil?
      return false if @b_ezsignfoldertype_isactive.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] pki_ezsignfoldertype_id Value to be assigned
    def pki_ezsignfoldertype_id=(pki_ezsignfoldertype_id)
      if pki_ezsignfoldertype_id.nil?
        fail ArgumentError, 'pki_ezsignfoldertype_id cannot be nil'
      end

      if pki_ezsignfoldertype_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldertype_id", must be greater than or equal to 0.'
      end

      @pki_ezsignfoldertype_id = pki_ezsignfoldertype_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_branding_id Value to be assigned
    def fki_branding_id=(fki_branding_id)
      if fki_branding_id.nil?
        fail ArgumentError, 'fki_branding_id cannot be nil'
      end

      if fki_branding_id < 0
        fail ArgumentError, 'invalid value for "fki_branding_id", must be greater than or equal to 0.'
      end

      @fki_branding_id = fki_branding_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_billingentityinternal_id Value to be assigned
    def fki_billingentityinternal_id=(fki_billingentityinternal_id)
      if fki_billingentityinternal_id.nil?
        fail ArgumentError, 'fki_billingentityinternal_id cannot be nil'
      end

      if fki_billingentityinternal_id < 0
        fail ArgumentError, 'invalid value for "fki_billingentityinternal_id", must be greater than or equal to 0.'
      end

      @fki_billingentityinternal_id = fki_billingentityinternal_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_usergroup_id Value to be assigned
    def fki_usergroup_id=(fki_usergroup_id)
      if fki_usergroup_id.nil?
        fail ArgumentError, 'fki_usergroup_id cannot be nil'
      end

      if fki_usergroup_id > 255
        fail ArgumentError, 'invalid value for "fki_usergroup_id", must be smaller than or equal to 255.'
      end

      if fki_usergroup_id < 0
        fail ArgumentError, 'invalid value for "fki_usergroup_id", must be greater than or equal to 0.'
      end

      @fki_usergroup_id = fki_usergroup_id
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_usergroup_id_restricted Value to be assigned
    def fki_usergroup_id_restricted=(fki_usergroup_id_restricted)
      if fki_usergroup_id_restricted.nil?
        fail ArgumentError, 'fki_usergroup_id_restricted cannot be nil'
      end

      if fki_usergroup_id_restricted > 255
        fail ArgumentError, 'invalid value for "fki_usergroup_id_restricted", must be smaller than or equal to 255.'
      end

      if fki_usergroup_id_restricted < 0
        fail ArgumentError, 'invalid value for "fki_usergroup_id_restricted", must be greater than or equal to 0.'
      end

      @fki_usergroup_id_restricted = fki_usergroup_id_restricted
    end

    # Custom attribute writer method with validation
    # @param [Object] fki_ezsigntsarequirement_id Value to be assigned
    def fki_ezsigntsarequirement_id=(fki_ezsigntsarequirement_id)
      if fki_ezsigntsarequirement_id.nil?
        fail ArgumentError, 'fki_ezsigntsarequirement_id cannot be nil'
      end

      if fki_ezsigntsarequirement_id > 3
        fail ArgumentError, 'invalid value for "fki_ezsigntsarequirement_id", must be smaller than or equal to 3.'
      end

      if fki_ezsigntsarequirement_id < 1
        fail ArgumentError, 'invalid value for "fki_ezsigntsarequirement_id", must be greater than or equal to 1.'
      end

      @fki_ezsigntsarequirement_id = fki_ezsigntsarequirement_id
    end

    # Custom attribute writer method with validation
    # @param [Object] s_usergroup_name_x Value to be assigned
    def s_usergroup_name_x=(s_usergroup_name_x)
      if s_usergroup_name_x.nil?
        fail ArgumentError, 's_usergroup_name_x cannot be nil'
      end

      pattern = Regexp.new(/^.{0,50}$/)
      if s_usergroup_name_x !~ pattern
        fail ArgumentError, "invalid value for \"s_usergroup_name_x\", must conform to the pattern #{pattern}."
      end

      @s_usergroup_name_x = s_usergroup_name_x
    end

    # Custom attribute writer method with validation
    # @param [Object] s_usergroup_name_x_restricted Value to be assigned
    def s_usergroup_name_x_restricted=(s_usergroup_name_x_restricted)
      if s_usergroup_name_x_restricted.nil?
        fail ArgumentError, 's_usergroup_name_x_restricted cannot be nil'
      end

      pattern = Regexp.new(/^.{0,50}$/)
      if s_usergroup_name_x_restricted !~ pattern
        fail ArgumentError, "invalid value for \"s_usergroup_name_x_restricted\", must conform to the pattern #{pattern}."
      end

      @s_usergroup_name_x_restricted = s_usergroup_name_x_restricted
    end

    # Custom attribute writer method with validation
    # @param [Object] i_ezsignfoldertype_archivaldays Value to be assigned
    def i_ezsignfoldertype_archivaldays=(i_ezsignfoldertype_archivaldays)
      if i_ezsignfoldertype_archivaldays.nil?
        fail ArgumentError, 'i_ezsignfoldertype_archivaldays cannot be nil'
      end

      if i_ezsignfoldertype_archivaldays > 180
        fail ArgumentError, 'invalid value for "i_ezsignfoldertype_archivaldays", must be smaller than or equal to 180.'
      end

      if i_ezsignfoldertype_archivaldays < 0
        fail ArgumentError, 'invalid value for "i_ezsignfoldertype_archivaldays", must be greater than or equal to 0.'
      end

      @i_ezsignfoldertype_archivaldays = i_ezsignfoldertype_archivaldays
    end

    # Custom attribute writer method with validation
    # @param [Object] i_ezsignfoldertype_disposaldays Value to be assigned
    def i_ezsignfoldertype_disposaldays=(i_ezsignfoldertype_disposaldays)
      if i_ezsignfoldertype_disposaldays.nil?
        fail ArgumentError, 'i_ezsignfoldertype_disposaldays cannot be nil'
      end

      if i_ezsignfoldertype_disposaldays > 9999
        fail ArgumentError, 'invalid value for "i_ezsignfoldertype_disposaldays", must be smaller than or equal to 9999.'
      end

      if i_ezsignfoldertype_disposaldays < 0
        fail ArgumentError, 'invalid value for "i_ezsignfoldertype_disposaldays", must be greater than or equal to 0.'
      end

      @i_ezsignfoldertype_disposaldays = i_ezsignfoldertype_disposaldays
    end

    # Custom attribute writer method with validation
    # @param [Object] i_ezsignfoldertype_deadlinedays Value to be assigned
    def i_ezsignfoldertype_deadlinedays=(i_ezsignfoldertype_deadlinedays)
      if i_ezsignfoldertype_deadlinedays.nil?
        fail ArgumentError, 'i_ezsignfoldertype_deadlinedays cannot be nil'
      end

      if i_ezsignfoldertype_deadlinedays > 60
        fail ArgumentError, 'invalid value for "i_ezsignfoldertype_deadlinedays", must be smaller than or equal to 60.'
      end

      if i_ezsignfoldertype_deadlinedays < 1
        fail ArgumentError, 'invalid value for "i_ezsignfoldertype_deadlinedays", must be greater than or equal to 1.'
      end

      @i_ezsignfoldertype_deadlinedays = i_ezsignfoldertype_deadlinedays
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          pki_ezsignfoldertype_id == o.pki_ezsignfoldertype_id &&
          obj_ezsignfoldertype_name == o.obj_ezsignfoldertype_name &&
          fki_branding_id == o.fki_branding_id &&
          fki_billingentityinternal_id == o.fki_billingentityinternal_id &&
          fki_usergroup_id == o.fki_usergroup_id &&
          fki_usergroup_id_restricted == o.fki_usergroup_id_restricted &&
          fki_ezsigntsarequirement_id == o.fki_ezsigntsarequirement_id &&
          s_branding_description_x == o.s_branding_description_x &&
          s_billingentityinternal_description_x == o.s_billingentityinternal_description_x &&
          s_ezsigntsarequirement_description_x == o.s_ezsigntsarequirement_description_x &&
          s_email_address_signed == o.s_email_address_signed &&
          s_email_address_summary == o.s_email_address_summary &&
          s_usergroup_name_x == o.s_usergroup_name_x &&
          s_usergroup_name_x_restricted == o.s_usergroup_name_x_restricted &&
          e_ezsignfoldertype_privacylevel == o.e_ezsignfoldertype_privacylevel &&
          e_ezsignfoldertype_sendreminderfrequency == o.e_ezsignfoldertype_sendreminderfrequency &&
          i_ezsignfoldertype_archivaldays == o.i_ezsignfoldertype_archivaldays &&
          e_ezsignfoldertype_disposal == o.e_ezsignfoldertype_disposal &&
          i_ezsignfoldertype_disposaldays == o.i_ezsignfoldertype_disposaldays &&
          i_ezsignfoldertype_deadlinedays == o.i_ezsignfoldertype_deadlinedays &&
          b_ezsignfoldertype_delegate == o.b_ezsignfoldertype_delegate &&
          b_ezsignfoldertype_reassign == o.b_ezsignfoldertype_reassign &&
          b_ezsignfoldertype_sendattatchmentsigner == o.b_ezsignfoldertype_sendattatchmentsigner &&
          b_ezsignfoldertype_sendsignedtodocumentowner == o.b_ezsignfoldertype_sendsignedtodocumentowner &&
          b_ezsignfoldertype_sendsignedtofolderowner == o.b_ezsignfoldertype_sendsignedtofolderowner &&
          b_ezsignfoldertype_sendsignedtofullgroup == o.b_ezsignfoldertype_sendsignedtofullgroup &&
          b_ezsignfoldertype_sendsignedtolimitedgroup == o.b_ezsignfoldertype_sendsignedtolimitedgroup &&
          b_ezsignfoldertype_sendsignedtocolleague == o.b_ezsignfoldertype_sendsignedtocolleague &&
          b_ezsignfoldertype_sendsummarytodocumentowner == o.b_ezsignfoldertype_sendsummarytodocumentowner &&
          b_ezsignfoldertype_sendsummarytofolderowner == o.b_ezsignfoldertype_sendsummarytofolderowner &&
          b_ezsignfoldertype_sendsummarytofullgroup == o.b_ezsignfoldertype_sendsummarytofullgroup &&
          b_ezsignfoldertype_sendsummarytolimitedgroup == o.b_ezsignfoldertype_sendsummarytolimitedgroup &&
          b_ezsignfoldertype_sendsummarytocolleague == o.b_ezsignfoldertype_sendsummarytocolleague &&
          b_ezsignfoldertype_includeproofsigner == o.b_ezsignfoldertype_includeproofsigner &&
          b_ezsignfoldertype_includeproofuser == o.b_ezsignfoldertype_includeproofuser &&
          b_ezsignfoldertype_isactive == o.b_ezsignfoldertype_isactive
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [pki_ezsignfoldertype_id, obj_ezsignfoldertype_name, fki_branding_id, fki_billingentityinternal_id, fki_usergroup_id, fki_usergroup_id_restricted, fki_ezsigntsarequirement_id, s_branding_description_x, s_billingentityinternal_description_x, s_ezsigntsarequirement_description_x, s_email_address_signed, s_email_address_summary, s_usergroup_name_x, s_usergroup_name_x_restricted, e_ezsignfoldertype_privacylevel, e_ezsignfoldertype_sendreminderfrequency, i_ezsignfoldertype_archivaldays, e_ezsignfoldertype_disposal, i_ezsignfoldertype_disposaldays, i_ezsignfoldertype_deadlinedays, b_ezsignfoldertype_delegate, b_ezsignfoldertype_reassign, b_ezsignfoldertype_sendattatchmentsigner, b_ezsignfoldertype_sendsignedtodocumentowner, b_ezsignfoldertype_sendsignedtofolderowner, b_ezsignfoldertype_sendsignedtofullgroup, b_ezsignfoldertype_sendsignedtolimitedgroup, b_ezsignfoldertype_sendsignedtocolleague, b_ezsignfoldertype_sendsummarytodocumentowner, b_ezsignfoldertype_sendsummarytofolderowner, b_ezsignfoldertype_sendsummarytofullgroup, b_ezsignfoldertype_sendsummarytolimitedgroup, b_ezsignfoldertype_sendsummarytocolleague, b_ezsignfoldertype_includeproofsigner, b_ezsignfoldertype_includeproofuser, b_ezsignfoldertype_isactive].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = EzmaxApi.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
