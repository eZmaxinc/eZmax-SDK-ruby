=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.0
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 7.0.1

=end

require 'cgi'

module EzmaxApi
  class ObjectUserApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new User
    # The endpoint allows to create one or many elements at once.
    # @param user_create_object_v1_request [UserCreateObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [UserCreateObjectV1Response]
    def user_create_object_v1(user_create_object_v1_request, opts = {})
      data, _status_code, _headers = user_create_object_v1_with_http_info(user_create_object_v1_request, opts)
      data
    end

    # Create a new User
    # The endpoint allows to create one or many elements at once.
    # @param user_create_object_v1_request [UserCreateObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserCreateObjectV1Response, Integer, Hash)>] UserCreateObjectV1Response data, response status code and response headers
    def user_create_object_v1_with_http_info(user_create_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_create_object_v1 ...'
      end
      # verify the required parameter 'user_create_object_v1_request' is set
      if @api_client.config.client_side_validation && user_create_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_create_object_v1_request' when calling ObjectUserApi.user_create_object_v1"
      end
      # resource path
      local_var_path = '/1/object/user'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_create_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UserCreateObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_create_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_create_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an existing User
    # 
    # @param pki_user_id [Integer] The unique ID of the User
    # @param user_edit_object_v1_request [UserEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [UserEditObjectV1Response]
    def user_edit_object_v1(pki_user_id, user_edit_object_v1_request, opts = {})
      data, _status_code, _headers = user_edit_object_v1_with_http_info(pki_user_id, user_edit_object_v1_request, opts)
      data
    end

    # Edit an existing User
    # 
    # @param pki_user_id [Integer] The unique ID of the User
    # @param user_edit_object_v1_request [UserEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserEditObjectV1Response, Integer, Hash)>] UserEditObjectV1Response data, response status code and response headers
    def user_edit_object_v1_with_http_info(pki_user_id, user_edit_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_edit_object_v1 ...'
      end
      # verify the required parameter 'pki_user_id' is set
      if @api_client.config.client_side_validation && pki_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_user_id' when calling ObjectUserApi.user_edit_object_v1"
      end
      if @api_client.config.client_side_validation && pki_user_id < 0
        fail ArgumentError, 'invalid value for "pki_user_id" when calling ObjectUserApi.user_edit_object_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'user_edit_object_v1_request' is set
      if @api_client.config.client_side_validation && user_edit_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_edit_object_v1_request' when calling ObjectUserApi.user_edit_object_v1"
      end
      # resource path
      local_var_path = '/1/object/user/{pkiUserID}'.sub('{' + 'pkiUserID' + '}', CGI.escape(pki_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_edit_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UserEditObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_edit_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_edit_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit multiple Permissions
    # Using this endpoint, you can edit multiple Permissions at the same time.
    # @param pki_user_id [Integer] 
    # @param user_edit_permissions_v1_request [UserEditPermissionsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [UserEditPermissionsV1Response]
    def user_edit_permissions_v1(pki_user_id, user_edit_permissions_v1_request, opts = {})
      data, _status_code, _headers = user_edit_permissions_v1_with_http_info(pki_user_id, user_edit_permissions_v1_request, opts)
      data
    end

    # Edit multiple Permissions
    # Using this endpoint, you can edit multiple Permissions at the same time.
    # @param pki_user_id [Integer] 
    # @param user_edit_permissions_v1_request [UserEditPermissionsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserEditPermissionsV1Response, Integer, Hash)>] UserEditPermissionsV1Response data, response status code and response headers
    def user_edit_permissions_v1_with_http_info(pki_user_id, user_edit_permissions_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_edit_permissions_v1 ...'
      end
      # verify the required parameter 'pki_user_id' is set
      if @api_client.config.client_side_validation && pki_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_user_id' when calling ObjectUserApi.user_edit_permissions_v1"
      end
      if @api_client.config.client_side_validation && pki_user_id < 0
        fail ArgumentError, 'invalid value for "pki_user_id" when calling ObjectUserApi.user_edit_permissions_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'user_edit_permissions_v1_request' is set
      if @api_client.config.client_side_validation && user_edit_permissions_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'user_edit_permissions_v1_request' when calling ObjectUserApi.user_edit_permissions_v1"
      end
      # resource path
      local_var_path = '/1/object/user/{pkiUserID}/editPermissions'.sub('{' + 'pkiUserID' + '}', CGI.escape(pki_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user_edit_permissions_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UserEditPermissionsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_edit_permissions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_edit_permissions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing User's Apikeys
    # @param pki_user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [UserGetApikeysV1Response]
    def user_get_apikeys_v1(pki_user_id, opts = {})
      data, _status_code, _headers = user_get_apikeys_v1_with_http_info(pki_user_id, opts)
      data
    end

    # Retrieve an existing User&#39;s Apikeys
    # @param pki_user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserGetApikeysV1Response, Integer, Hash)>] UserGetApikeysV1Response data, response status code and response headers
    def user_get_apikeys_v1_with_http_info(pki_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_get_apikeys_v1 ...'
      end
      # verify the required parameter 'pki_user_id' is set
      if @api_client.config.client_side_validation && pki_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_user_id' when calling ObjectUserApi.user_get_apikeys_v1"
      end
      if @api_client.config.client_side_validation && pki_user_id < 0
        fail ArgumentError, 'invalid value for "pki_user_id" when calling ObjectUserApi.user_get_apikeys_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/user/{pkiUserID}/getApikeys'.sub('{' + 'pkiUserID' + '}', CGI.escape(pki_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserGetApikeysV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_get_apikeys_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_get_apikeys_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Users and IDs
    # Get the list of User to be used in a dropdown or autocomplete control.
    # @param s_selector [String] The type of Users to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_filter_active Specify which results we want to display. (default to 'Active')
    # @option opts [String] :s_query Allow to filter the returned results
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @return [UserGetAutocompleteV2Response]
    def user_get_autocomplete_v2(s_selector, opts = {})
      data, _status_code, _headers = user_get_autocomplete_v2_with_http_info(s_selector, opts)
      data
    end

    # Retrieve Users and IDs
    # Get the list of User to be used in a dropdown or autocomplete control.
    # @param s_selector [String] The type of Users to return
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_filter_active Specify which results we want to display. (default to 'Active')
    # @option opts [String] :s_query Allow to filter the returned results
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @return [Array<(UserGetAutocompleteV2Response, Integer, Hash)>] UserGetAutocompleteV2Response data, response status code and response headers
    def user_get_autocomplete_v2_with_http_info(s_selector, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_get_autocomplete_v2 ...'
      end
      # verify the required parameter 's_selector' is set
      if @api_client.config.client_side_validation && s_selector.nil?
        fail ArgumentError, "Missing the required parameter 's_selector' when calling ObjectUserApi.user_get_autocomplete_v2"
      end
      # verify enum value
      allowable_values = ["AgentBrokerEmployeeEzsignUserNormal", "AgentBrokerEmployeeNormalBuiltIn", "AgentBrokerEzsignuserNormal", "ClonableUsers", "EzsignuserBuiltIn", "Normal", "UsergroupDelegated"]
      if @api_client.config.client_side_validation && !allowable_values.include?(s_selector)
        fail ArgumentError, "invalid value for \"s_selector\", must be one of #{allowable_values}"
      end
      allowable_values = ["All", "Active", "Inactive"]
      if @api_client.config.client_side_validation && opts[:'e_filter_active'] && !allowable_values.include?(opts[:'e_filter_active'])
        fail ArgumentError, "invalid value for \"e_filter_active\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/2/object/user/getAutocomplete/{sSelector}'.sub('{' + 'sSelector' + '}', CGI.escape(s_selector.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eFilterActive'] = opts[:'e_filter_active'] if !opts[:'e_filter_active'].nil?
      query_params[:'sQuery'] = opts[:'s_query'] if !opts[:'s_query'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserGetAutocompleteV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_get_autocomplete_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_get_autocomplete_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing User's Effective Permissions
    # Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
    # @param pki_user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [UserGetEffectivePermissionsV1Response]
    def user_get_effective_permissions_v1(pki_user_id, opts = {})
      data, _status_code, _headers = user_get_effective_permissions_v1_with_http_info(pki_user_id, opts)
      data
    end

    # Retrieve an existing User&#39;s Effective Permissions
    # Effective Permissions refers to the combination of Permissions held by a User and the Permissions associated with the Usergroups they belong to.
    # @param pki_user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserGetEffectivePermissionsV1Response, Integer, Hash)>] UserGetEffectivePermissionsV1Response data, response status code and response headers
    def user_get_effective_permissions_v1_with_http_info(pki_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_get_effective_permissions_v1 ...'
      end
      # verify the required parameter 'pki_user_id' is set
      if @api_client.config.client_side_validation && pki_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_user_id' when calling ObjectUserApi.user_get_effective_permissions_v1"
      end
      if @api_client.config.client_side_validation && pki_user_id < 0
        fail ArgumentError, 'invalid value for "pki_user_id" when calling ObjectUserApi.user_get_effective_permissions_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/user/{pkiUserID}/getEffectivePermissions'.sub('{' + 'pkiUserID' + '}', CGI.escape(pki_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserGetEffectivePermissionsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_get_effective_permissions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_get_effective_permissions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve User list
    # Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eUserType | AgentBroker<br>Assistant<br>Employee<br>EzsignUser<br>Normal | | eUserOrigin | BuiltIn<br>External | | eUserEzsignaccess | No<br>PaidByOffice<br>PerDocument<br>Prepaid |
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_order_by Specify how you want the results to be sorted
    # @option opts [Integer] :i_row_max 
    # @option opts [Integer] :i_row_offset  (default to 0)
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @option opts [String] :s_filter 
    # @return [UserGetListV1Response]
    def user_get_list_v1(opts = {})
      data, _status_code, _headers = user_get_list_v1_with_http_info(opts)
      data
    end

    # Retrieve User list
    # Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eUserType | AgentBroker&lt;br&gt;Assistant&lt;br&gt;Employee&lt;br&gt;EzsignUser&lt;br&gt;Normal | | eUserOrigin | BuiltIn&lt;br&gt;External | | eUserEzsignaccess | No&lt;br&gt;PaidByOffice&lt;br&gt;PerDocument&lt;br&gt;Prepaid |
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_order_by Specify how you want the results to be sorted
    # @option opts [Integer] :i_row_max 
    # @option opts [Integer] :i_row_offset  (default to 0)
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @option opts [String] :s_filter 
    # @return [Array<(UserGetListV1Response, Integer, Hash)>] UserGetListV1Response data, response status code and response headers
    def user_get_list_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_get_list_v1 ...'
      end
      allowable_values = ["pkiUserID_ASC", "pkiUserID_DESC", "sUserFirstname_ASC", "sUserFirstname_DESC", "sUserLastname_ASC", "sUserLastname_DESC", "sUserLoginname_ASC", "sUserLoginname_DESC", "bUserIsactive_ASC", "bUserIsactive_DESC", "eUserType_ASC", "eUserType_DESC", "eUserOrigin_ASC", "eUserOrigin_DESC", "eUserEzsignaccess_ASC", "eUserEzsignaccess_DESC", "dtUserEzsignprepaidexpiration_ASC", "dtUserEzsignprepaidexpiration_DESC", "sEmailAddress_ASC", "sEmailAddress_DESC"]
      if @api_client.config.client_side_validation && opts[:'e_order_by'] && !allowable_values.include?(opts[:'e_order_by'])
        fail ArgumentError, "invalid value for \"e_order_by\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'i_row_max'].nil? && opts[:'i_row_max'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"i_row_max"]" when calling ObjectUserApi.user_get_list_v1, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'i_row_max'].nil? && opts[:'i_row_max'] < 1
        fail ArgumentError, 'invalid value for "opts[:"i_row_max"]" when calling ObjectUserApi.user_get_list_v1, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'i_row_offset'].nil? && opts[:'i_row_offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"i_row_offset"]" when calling ObjectUserApi.user_get_list_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/user/getList'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eOrderBy'] = opts[:'e_order_by'] if !opts[:'e_order_by'].nil?
      query_params[:'iRowMax'] = opts[:'i_row_max'] if !opts[:'i_row_max'].nil?
      query_params[:'iRowOffset'] = opts[:'i_row_offset'] if !opts[:'i_row_offset'].nil?
      query_params[:'sFilter'] = opts[:'s_filter'] if !opts[:'s_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'])
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserGetListV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_get_list_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_get_list_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing User
    # 
    # @param pki_user_id [Integer] The unique ID of the User
    # @param [Hash] opts the optional parameters
    # @return [UserGetObjectV2Response]
    def user_get_object_v2(pki_user_id, opts = {})
      data, _status_code, _headers = user_get_object_v2_with_http_info(pki_user_id, opts)
      data
    end

    # Retrieve an existing User
    # 
    # @param pki_user_id [Integer] The unique ID of the User
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserGetObjectV2Response, Integer, Hash)>] UserGetObjectV2Response data, response status code and response headers
    def user_get_object_v2_with_http_info(pki_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_get_object_v2 ...'
      end
      # verify the required parameter 'pki_user_id' is set
      if @api_client.config.client_side_validation && pki_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_user_id' when calling ObjectUserApi.user_get_object_v2"
      end
      if @api_client.config.client_side_validation && pki_user_id < 0
        fail ArgumentError, 'invalid value for "pki_user_id" when calling ObjectUserApi.user_get_object_v2, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/2/object/user/{pkiUserID}'.sub('{' + 'pkiUserID' + '}', CGI.escape(pki_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserGetObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_get_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_get_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing User's Permissions
    # @param pki_user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [UserGetPermissionsV1Response]
    def user_get_permissions_v1(pki_user_id, opts = {})
      data, _status_code, _headers = user_get_permissions_v1_with_http_info(pki_user_id, opts)
      data
    end

    # Retrieve an existing User&#39;s Permissions
    # @param pki_user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserGetPermissionsV1Response, Integer, Hash)>] UserGetPermissionsV1Response data, response status code and response headers
    def user_get_permissions_v1_with_http_info(pki_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_get_permissions_v1 ...'
      end
      # verify the required parameter 'pki_user_id' is set
      if @api_client.config.client_side_validation && pki_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_user_id' when calling ObjectUserApi.user_get_permissions_v1"
      end
      if @api_client.config.client_side_validation && pki_user_id < 0
        fail ArgumentError, 'invalid value for "pki_user_id" when calling ObjectUserApi.user_get_permissions_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/user/{pkiUserID}/getPermissions'.sub('{' + 'pkiUserID' + '}', CGI.escape(pki_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserGetPermissionsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_get_permissions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_get_permissions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing User's Subnets
    # @param pki_user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [UserGetSubnetsV1Response]
    def user_get_subnets_v1(pki_user_id, opts = {})
      data, _status_code, _headers = user_get_subnets_v1_with_http_info(pki_user_id, opts)
      data
    end

    # Retrieve an existing User&#39;s Subnets
    # @param pki_user_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserGetSubnetsV1Response, Integer, Hash)>] UserGetSubnetsV1Response data, response status code and response headers
    def user_get_subnets_v1_with_http_info(pki_user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_get_subnets_v1 ...'
      end
      # verify the required parameter 'pki_user_id' is set
      if @api_client.config.client_side_validation && pki_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_user_id' when calling ObjectUserApi.user_get_subnets_v1"
      end
      if @api_client.config.client_side_validation && pki_user_id < 0
        fail ArgumentError, 'invalid value for "pki_user_id" when calling ObjectUserApi.user_get_subnets_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/user/{pkiUserID}/getSubnets'.sub('{' + 'pkiUserID' + '}', CGI.escape(pki_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserGetSubnetsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_get_subnets_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_get_subnets_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send password reset
    # Send the password reset email
    # @param pki_user_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [UserSendPasswordResetV1Response]
    def user_send_password_reset_v1(pki_user_id, body, opts = {})
      data, _status_code, _headers = user_send_password_reset_v1_with_http_info(pki_user_id, body, opts)
      data
    end

    # Send password reset
    # Send the password reset email
    # @param pki_user_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserSendPasswordResetV1Response, Integer, Hash)>] UserSendPasswordResetV1Response data, response status code and response headers
    def user_send_password_reset_v1_with_http_info(pki_user_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserApi.user_send_password_reset_v1 ...'
      end
      # verify the required parameter 'pki_user_id' is set
      if @api_client.config.client_side_validation && pki_user_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_user_id' when calling ObjectUserApi.user_send_password_reset_v1"
      end
      if @api_client.config.client_side_validation && pki_user_id < 0
        fail ArgumentError, 'invalid value for "pki_user_id" when calling ObjectUserApi.user_send_password_reset_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectUserApi.user_send_password_reset_v1"
      end
      # resource path
      local_var_path = '/1/object/user/{pkiUserID}/sendPasswordReset'.sub('{' + 'pkiUserID' + '}', CGI.escape(pki_user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UserSendPasswordResetV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserApi.user_send_password_reset_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserApi#user_send_password_reset_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
