=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.2
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module EzmaxApi
  class ObjectEzsignbulksendApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new Ezsignbulksendtransmission in the Ezsignbulksend
    # @param pki_ezsignbulksend_id [Integer] 
    # @param ezsignbulksend_create_ezsignbulksendtransmission_v2_request [EzsignbulksendCreateEzsignbulksendtransmissionV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignbulksendCreateEzsignbulksendtransmissionV2Response]
    def ezsignbulksend_create_ezsignbulksendtransmission_v2(pki_ezsignbulksend_id, ezsignbulksend_create_ezsignbulksendtransmission_v2_request, opts = {})
      data, _status_code, _headers = ezsignbulksend_create_ezsignbulksendtransmission_v2_with_http_info(pki_ezsignbulksend_id, ezsignbulksend_create_ezsignbulksendtransmission_v2_request, opts)
      data
    end

    # Create a new Ezsignbulksendtransmission in the Ezsignbulksend
    # @param pki_ezsignbulksend_id [Integer] 
    # @param ezsignbulksend_create_ezsignbulksendtransmission_v2_request [EzsignbulksendCreateEzsignbulksendtransmissionV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignbulksendCreateEzsignbulksendtransmissionV2Response, Integer, Hash)>] EzsignbulksendCreateEzsignbulksendtransmissionV2Response data, response status code and response headers
    def ezsignbulksend_create_ezsignbulksendtransmission_v2_with_http_info(pki_ezsignbulksend_id, ezsignbulksend_create_ezsignbulksendtransmission_v2_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_create_ezsignbulksendtransmission_v2 ...'
      end
      # verify the required parameter 'pki_ezsignbulksend_id' is set
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignbulksend_id' when calling ObjectEzsignbulksendApi.ezsignbulksend_create_ezsignbulksendtransmission_v2"
      end
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignbulksend_id" when calling ObjectEzsignbulksendApi.ezsignbulksend_create_ezsignbulksendtransmission_v2, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignbulksend_create_ezsignbulksendtransmission_v2_request' is set
      if @api_client.config.client_side_validation && ezsignbulksend_create_ezsignbulksendtransmission_v2_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignbulksend_create_ezsignbulksendtransmission_v2_request' when calling ObjectEzsignbulksendApi.ezsignbulksend_create_ezsignbulksendtransmission_v2"
      end
      # resource path
      local_var_path = '/2/object/ezsignbulksend/{pkiEzsignbulksendID}/createEzsignbulksendtransmission'.sub('{' + 'pkiEzsignbulksendID' + '}', CGI.escape(pki_ezsignbulksend_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignbulksend_create_ezsignbulksendtransmission_v2_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendCreateEzsignbulksendtransmissionV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_create_ezsignbulksendtransmission_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_create_ezsignbulksendtransmission_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Ezsignbulksend
    # The endpoint allows to create one or many elements at once.
    # @param ezsignbulksend_create_object_v1_request [EzsignbulksendCreateObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignbulksendCreateObjectV1Response]
    def ezsignbulksend_create_object_v1(ezsignbulksend_create_object_v1_request, opts = {})
      data, _status_code, _headers = ezsignbulksend_create_object_v1_with_http_info(ezsignbulksend_create_object_v1_request, opts)
      data
    end

    # Create a new Ezsignbulksend
    # The endpoint allows to create one or many elements at once.
    # @param ezsignbulksend_create_object_v1_request [EzsignbulksendCreateObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignbulksendCreateObjectV1Response, Integer, Hash)>] EzsignbulksendCreateObjectV1Response data, response status code and response headers
    def ezsignbulksend_create_object_v1_with_http_info(ezsignbulksend_create_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_create_object_v1 ...'
      end
      # verify the required parameter 'ezsignbulksend_create_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsignbulksend_create_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignbulksend_create_object_v1_request' when calling ObjectEzsignbulksendApi.ezsignbulksend_create_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignbulksend'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignbulksend_create_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendCreateObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_create_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_create_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Ezsignbulksend
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignbulksendDeleteObjectV1Response]
    def ezsignbulksend_delete_object_v1(pki_ezsignbulksend_id, opts = {})
      data, _status_code, _headers = ezsignbulksend_delete_object_v1_with_http_info(pki_ezsignbulksend_id, opts)
      data
    end

    # Delete an existing Ezsignbulksend
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignbulksendDeleteObjectV1Response, Integer, Hash)>] EzsignbulksendDeleteObjectV1Response data, response status code and response headers
    def ezsignbulksend_delete_object_v1_with_http_info(pki_ezsignbulksend_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_delete_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignbulksend_id' is set
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignbulksend_id' when calling ObjectEzsignbulksendApi.ezsignbulksend_delete_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignbulksend_id" when calling ObjectEzsignbulksendApi.ezsignbulksend_delete_object_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignbulksend/{pkiEzsignbulksendID}'.sub('{' + 'pkiEzsignbulksendID' + '}', CGI.escape(pki_ezsignbulksend_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendDeleteObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_delete_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_delete_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an existing Ezsignbulksend
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param ezsignbulksend_edit_object_v1_request [EzsignbulksendEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignbulksendEditObjectV1Response]
    def ezsignbulksend_edit_object_v1(pki_ezsignbulksend_id, ezsignbulksend_edit_object_v1_request, opts = {})
      data, _status_code, _headers = ezsignbulksend_edit_object_v1_with_http_info(pki_ezsignbulksend_id, ezsignbulksend_edit_object_v1_request, opts)
      data
    end

    # Edit an existing Ezsignbulksend
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param ezsignbulksend_edit_object_v1_request [EzsignbulksendEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignbulksendEditObjectV1Response, Integer, Hash)>] EzsignbulksendEditObjectV1Response data, response status code and response headers
    def ezsignbulksend_edit_object_v1_with_http_info(pki_ezsignbulksend_id, ezsignbulksend_edit_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_edit_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignbulksend_id' is set
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignbulksend_id' when calling ObjectEzsignbulksendApi.ezsignbulksend_edit_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignbulksend_id" when calling ObjectEzsignbulksendApi.ezsignbulksend_edit_object_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignbulksend_edit_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsignbulksend_edit_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignbulksend_edit_object_v1_request' when calling ObjectEzsignbulksendApi.ezsignbulksend_edit_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignbulksend/{pkiEzsignbulksendID}'.sub('{' + 'pkiEzsignbulksendID' + '}', CGI.escape(pki_ezsignbulksend_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignbulksend_edit_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendEditObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_edit_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_edit_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignbulksend's empty Csv template
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param e_csv_separator [String] Separator that will be used to separate fields
    # @param [Hash] opts the optional parameters
    # @return [String]
    def ezsignbulksend_get_csv_template_v1(pki_ezsignbulksend_id, e_csv_separator, opts = {})
      data, _status_code, _headers = ezsignbulksend_get_csv_template_v1_with_http_info(pki_ezsignbulksend_id, e_csv_separator, opts)
      data
    end

    # Retrieve an existing Ezsignbulksend&#39;s empty Csv template
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param e_csv_separator [String] Separator that will be used to separate fields
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def ezsignbulksend_get_csv_template_v1_with_http_info(pki_ezsignbulksend_id, e_csv_separator, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_get_csv_template_v1 ...'
      end
      # verify the required parameter 'pki_ezsignbulksend_id' is set
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignbulksend_id' when calling ObjectEzsignbulksendApi.ezsignbulksend_get_csv_template_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignbulksend_id" when calling ObjectEzsignbulksendApi.ezsignbulksend_get_csv_template_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'e_csv_separator' is set
      if @api_client.config.client_side_validation && e_csv_separator.nil?
        fail ArgumentError, "Missing the required parameter 'e_csv_separator' when calling ObjectEzsignbulksendApi.ezsignbulksend_get_csv_template_v1"
      end
      # verify enum value
      allowable_values = ["Comma", "Semicolon"]
      if @api_client.config.client_side_validation && !allowable_values.include?(e_csv_separator)
        fail ArgumentError, "invalid value for \"e_csv_separator\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getCsvTemplate'.sub('{' + 'pkiEzsignbulksendID' + '}', CGI.escape(pki_ezsignbulksend_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eCsvSeparator'] = e_csv_separator

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv', 'application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_get_csv_template_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_get_csv_template_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignbulksend's Ezsignbulksendtransmissions
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignbulksendGetEzsignbulksendtransmissionsV1Response]
    def ezsignbulksend_get_ezsignbulksendtransmissions_v1(pki_ezsignbulksend_id, opts = {})
      data, _status_code, _headers = ezsignbulksend_get_ezsignbulksendtransmissions_v1_with_http_info(pki_ezsignbulksend_id, opts)
      data
    end

    # Retrieve an existing Ezsignbulksend&#39;s Ezsignbulksendtransmissions
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignbulksendGetEzsignbulksendtransmissionsV1Response, Integer, Hash)>] EzsignbulksendGetEzsignbulksendtransmissionsV1Response data, response status code and response headers
    def ezsignbulksend_get_ezsignbulksendtransmissions_v1_with_http_info(pki_ezsignbulksend_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_get_ezsignbulksendtransmissions_v1 ...'
      end
      # verify the required parameter 'pki_ezsignbulksend_id' is set
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignbulksend_id' when calling ObjectEzsignbulksendApi.ezsignbulksend_get_ezsignbulksendtransmissions_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignbulksend_id" when calling ObjectEzsignbulksendApi.ezsignbulksend_get_ezsignbulksendtransmissions_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignbulksendtransmissions'.sub('{' + 'pkiEzsignbulksendID' + '}', CGI.escape(pki_ezsignbulksend_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendGetEzsignbulksendtransmissionsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_get_ezsignbulksendtransmissions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_get_ezsignbulksendtransmissions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignbulksend's automatic Ezsignsignatures
    # Return the Ezsignsignatures that can be signed by the current user at the current step in the process
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignbulksendGetEzsignsignaturesAutomaticV1Response]
    def ezsignbulksend_get_ezsignsignatures_automatic_v1(pki_ezsignbulksend_id, opts = {})
      data, _status_code, _headers = ezsignbulksend_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsignbulksend_id, opts)
      data
    end

    # Retrieve an existing Ezsignbulksend&#39;s automatic Ezsignsignatures
    # Return the Ezsignsignatures that can be signed by the current user at the current step in the process
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignbulksendGetEzsignsignaturesAutomaticV1Response, Integer, Hash)>] EzsignbulksendGetEzsignsignaturesAutomaticV1Response data, response status code and response headers
    def ezsignbulksend_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsignbulksend_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_get_ezsignsignatures_automatic_v1 ...'
      end
      # verify the required parameter 'pki_ezsignbulksend_id' is set
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignbulksend_id' when calling ObjectEzsignbulksendApi.ezsignbulksend_get_ezsignsignatures_automatic_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignbulksend_id" when calling ObjectEzsignbulksendApi.ezsignbulksend_get_ezsignsignatures_automatic_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getEzsignsignaturesAutomatic'.sub('{' + 'pkiEzsignbulksendID' + '}', CGI.escape(pki_ezsignbulksend_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendGetEzsignsignaturesAutomaticV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_get_ezsignsignatures_automatic_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_get_ezsignsignatures_automatic_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignbulksend's forms data
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignbulksendGetFormsDataV1Response]
    def ezsignbulksend_get_forms_data_v1(pki_ezsignbulksend_id, opts = {})
      data, _status_code, _headers = ezsignbulksend_get_forms_data_v1_with_http_info(pki_ezsignbulksend_id, opts)
      data
    end

    # Retrieve an existing Ezsignbulksend&#39;s forms data
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignbulksendGetFormsDataV1Response, Integer, Hash)>] EzsignbulksendGetFormsDataV1Response data, response status code and response headers
    def ezsignbulksend_get_forms_data_v1_with_http_info(pki_ezsignbulksend_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_get_forms_data_v1 ...'
      end
      # verify the required parameter 'pki_ezsignbulksend_id' is set
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignbulksend_id' when calling ObjectEzsignbulksendApi.ezsignbulksend_get_forms_data_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignbulksend_id" when calling ObjectEzsignbulksendApi.ezsignbulksend_get_forms_data_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignbulksend/{pkiEzsignbulksendID}/getFormsData'.sub('{' + 'pkiEzsignbulksendID' + '}', CGI.escape(pki_ezsignbulksend_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/zip']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendGetFormsDataV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_get_forms_data_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_get_forms_data_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Ezsignbulksend list
    # Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_order_by Specify how you want the results to be sorted
    # @option opts [Integer] :i_row_max 
    # @option opts [Integer] :i_row_offset  (default to 0)
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @option opts [String] :s_filter 
    # @return [EzsignbulksendGetListV1Response]
    def ezsignbulksend_get_list_v1(opts = {})
      data, _status_code, _headers = ezsignbulksend_get_list_v1_with_http_info(opts)
      data
    end

    # Retrieve Ezsignbulksend list
    # Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_order_by Specify how you want the results to be sorted
    # @option opts [Integer] :i_row_max 
    # @option opts [Integer] :i_row_offset  (default to 0)
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @option opts [String] :s_filter 
    # @return [Array<(EzsignbulksendGetListV1Response, Integer, Hash)>] EzsignbulksendGetListV1Response data, response status code and response headers
    def ezsignbulksend_get_list_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_get_list_v1 ...'
      end
      allowable_values = ["pkiEzsignbulksendID_ASC", "pkiEzsignbulksendID_DESC", "fkiEzsignfoldertypeID_ASC", "fkiEzsignfoldertypeID_DESC", "sEzsignbulksendDescription_ASC", "sEzsignbulksendDescription_DESC", "sEzsignfoldertypeNameX_ASC", "sEzsignfoldertypeNameX_DESC", "eEzsignfoldertypePrivacylevel_ASC", "eEzsignfoldertypePrivacylevel_DESC", "bEzsignbulksendNeedvalidation_ASC", "bEzsignbulksendNeedvalidation_DESC", "iEzsignbulksendtransmission_ASC", "iEzsignbulksendtransmission_DESC", "iEzsignfolder_ASC", "iEzsignfolder_DESC", "iEzsigndocument_ASC", "iEzsigndocument_DESC", "iEzsignsignature_ASC", "iEzsignsignature_DESC", "iEzsignsignatureSigned_ASC", "iEzsignsignatureSigned_DESC", "bEzsignbulksendIsactive_ASC", "bEzsignbulksendIsactive_DESC"]
      if @api_client.config.client_side_validation && opts[:'e_order_by'] && !allowable_values.include?(opts[:'e_order_by'])
        fail ArgumentError, "invalid value for \"e_order_by\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'i_row_max'].nil? && opts[:'i_row_max'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"i_row_max"]" when calling ObjectEzsignbulksendApi.ezsignbulksend_get_list_v1, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'i_row_max'].nil? && opts[:'i_row_max'] < 1
        fail ArgumentError, 'invalid value for "opts[:"i_row_max"]" when calling ObjectEzsignbulksendApi.ezsignbulksend_get_list_v1, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'i_row_offset'].nil? && opts[:'i_row_offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"i_row_offset"]" when calling ObjectEzsignbulksendApi.ezsignbulksend_get_list_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignbulksend/getList'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eOrderBy'] = opts[:'e_order_by'] if !opts[:'e_order_by'].nil?
      query_params[:'iRowMax'] = opts[:'i_row_max'] if !opts[:'i_row_max'].nil?
      query_params[:'iRowOffset'] = opts[:'i_row_offset'] if !opts[:'i_row_offset'].nil?
      query_params[:'sFilter'] = opts[:'s_filter'] if !opts[:'s_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']) unless header_params['Accept']
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendGetListV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_get_list_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_get_list_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignbulksend
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignbulksendGetObjectV2Response]
    def ezsignbulksend_get_object_v2(pki_ezsignbulksend_id, opts = {})
      data, _status_code, _headers = ezsignbulksend_get_object_v2_with_http_info(pki_ezsignbulksend_id, opts)
      data
    end

    # Retrieve an existing Ezsignbulksend
    # 
    # @param pki_ezsignbulksend_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignbulksendGetObjectV2Response, Integer, Hash)>] EzsignbulksendGetObjectV2Response data, response status code and response headers
    def ezsignbulksend_get_object_v2_with_http_info(pki_ezsignbulksend_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_get_object_v2 ...'
      end
      # verify the required parameter 'pki_ezsignbulksend_id' is set
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignbulksend_id' when calling ObjectEzsignbulksendApi.ezsignbulksend_get_object_v2"
      end
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignbulksend_id" when calling ObjectEzsignbulksendApi.ezsignbulksend_get_object_v2, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/2/object/ezsignbulksend/{pkiEzsignbulksendID}'.sub('{' + 'pkiEzsignbulksendID' + '}', CGI.escape(pki_ezsignbulksend_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendGetObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_get_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_get_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
    # @param pki_ezsignbulksend_id [Integer] 
    # @param ezsignbulksend_reorder_v1_request [EzsignbulksendReorderV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignbulksendReorderV1Response]
    def ezsignbulksend_reorder_v1(pki_ezsignbulksend_id, ezsignbulksend_reorder_v1_request, opts = {})
      data, _status_code, _headers = ezsignbulksend_reorder_v1_with_http_info(pki_ezsignbulksend_id, ezsignbulksend_reorder_v1_request, opts)
      data
    end

    # Reorder Ezsignbulksenddocumentmappings in the Ezsignbulksend
    # @param pki_ezsignbulksend_id [Integer] 
    # @param ezsignbulksend_reorder_v1_request [EzsignbulksendReorderV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignbulksendReorderV1Response, Integer, Hash)>] EzsignbulksendReorderV1Response data, response status code and response headers
    def ezsignbulksend_reorder_v1_with_http_info(pki_ezsignbulksend_id, ezsignbulksend_reorder_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignbulksendApi.ezsignbulksend_reorder_v1 ...'
      end
      # verify the required parameter 'pki_ezsignbulksend_id' is set
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignbulksend_id' when calling ObjectEzsignbulksendApi.ezsignbulksend_reorder_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignbulksend_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignbulksend_id" when calling ObjectEzsignbulksendApi.ezsignbulksend_reorder_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignbulksend_reorder_v1_request' is set
      if @api_client.config.client_side_validation && ezsignbulksend_reorder_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignbulksend_reorder_v1_request' when calling ObjectEzsignbulksendApi.ezsignbulksend_reorder_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignbulksend/{pkiEzsignbulksendID}/reorder'.sub('{' + 'pkiEzsignbulksendID' + '}', CGI.escape(pki_ezsignbulksend_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignbulksend_reorder_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignbulksendReorderV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignbulksendApi.ezsignbulksend_reorder_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignbulksendApi#ezsignbulksend_reorder_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
