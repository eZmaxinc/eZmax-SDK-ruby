=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.2
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module EzmaxApi
  class ObjectEzsignannotationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new Ezsignannotation
    # The endpoint allows to create one or many elements at once.
    # @param ezsignannotation_create_object_v1_request [EzsignannotationCreateObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignannotationCreateObjectV1Response]
    def ezsignannotation_create_object_v1(ezsignannotation_create_object_v1_request, opts = {})
      data, _status_code, _headers = ezsignannotation_create_object_v1_with_http_info(ezsignannotation_create_object_v1_request, opts)
      data
    end

    # Create a new Ezsignannotation
    # The endpoint allows to create one or many elements at once.
    # @param ezsignannotation_create_object_v1_request [EzsignannotationCreateObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignannotationCreateObjectV1Response, Integer, Hash)>] EzsignannotationCreateObjectV1Response data, response status code and response headers
    def ezsignannotation_create_object_v1_with_http_info(ezsignannotation_create_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignannotationApi.ezsignannotation_create_object_v1 ...'
      end
      # verify the required parameter 'ezsignannotation_create_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsignannotation_create_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignannotation_create_object_v1_request' when calling ObjectEzsignannotationApi.ezsignannotation_create_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignannotation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignannotation_create_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignannotationCreateObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignannotationApi.ezsignannotation_create_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignannotationApi#ezsignannotation_create_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Ezsignannotation
    # 
    # @param pki_ezsignannotation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignannotationDeleteObjectV1Response]
    def ezsignannotation_delete_object_v1(pki_ezsignannotation_id, opts = {})
      data, _status_code, _headers = ezsignannotation_delete_object_v1_with_http_info(pki_ezsignannotation_id, opts)
      data
    end

    # Delete an existing Ezsignannotation
    # 
    # @param pki_ezsignannotation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignannotationDeleteObjectV1Response, Integer, Hash)>] EzsignannotationDeleteObjectV1Response data, response status code and response headers
    def ezsignannotation_delete_object_v1_with_http_info(pki_ezsignannotation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignannotationApi.ezsignannotation_delete_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignannotation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignannotation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignannotation_id' when calling ObjectEzsignannotationApi.ezsignannotation_delete_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignannotation/{pkiEzsignannotationID}'.sub('{' + 'pkiEzsignannotationID' + '}', CGI.escape(pki_ezsignannotation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignannotationDeleteObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignannotationApi.ezsignannotation_delete_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignannotationApi#ezsignannotation_delete_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an existing Ezsignannotation
    # 
    # @param pki_ezsignannotation_id [Integer] 
    # @param ezsignannotation_edit_object_v1_request [EzsignannotationEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignannotationEditObjectV1Response]
    def ezsignannotation_edit_object_v1(pki_ezsignannotation_id, ezsignannotation_edit_object_v1_request, opts = {})
      data, _status_code, _headers = ezsignannotation_edit_object_v1_with_http_info(pki_ezsignannotation_id, ezsignannotation_edit_object_v1_request, opts)
      data
    end

    # Edit an existing Ezsignannotation
    # 
    # @param pki_ezsignannotation_id [Integer] 
    # @param ezsignannotation_edit_object_v1_request [EzsignannotationEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignannotationEditObjectV1Response, Integer, Hash)>] EzsignannotationEditObjectV1Response data, response status code and response headers
    def ezsignannotation_edit_object_v1_with_http_info(pki_ezsignannotation_id, ezsignannotation_edit_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignannotationApi.ezsignannotation_edit_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignannotation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignannotation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignannotation_id' when calling ObjectEzsignannotationApi.ezsignannotation_edit_object_v1"
      end
      # verify the required parameter 'ezsignannotation_edit_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsignannotation_edit_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignannotation_edit_object_v1_request' when calling ObjectEzsignannotationApi.ezsignannotation_edit_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignannotation/{pkiEzsignannotationID}'.sub('{' + 'pkiEzsignannotationID' + '}', CGI.escape(pki_ezsignannotation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignannotation_edit_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignannotationEditObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignannotationApi.ezsignannotation_edit_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignannotationApi#ezsignannotation_edit_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignannotation
    # 
    # @param pki_ezsignannotation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignannotationGetObjectV2Response]
    def ezsignannotation_get_object_v2(pki_ezsignannotation_id, opts = {})
      data, _status_code, _headers = ezsignannotation_get_object_v2_with_http_info(pki_ezsignannotation_id, opts)
      data
    end

    # Retrieve an existing Ezsignannotation
    # 
    # @param pki_ezsignannotation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignannotationGetObjectV2Response, Integer, Hash)>] EzsignannotationGetObjectV2Response data, response status code and response headers
    def ezsignannotation_get_object_v2_with_http_info(pki_ezsignannotation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignannotationApi.ezsignannotation_get_object_v2 ...'
      end
      # verify the required parameter 'pki_ezsignannotation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignannotation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignannotation_id' when calling ObjectEzsignannotationApi.ezsignannotation_get_object_v2"
      end
      # resource path
      local_var_path = '/2/object/ezsignannotation/{pkiEzsignannotationID}'.sub('{' + 'pkiEzsignannotationID' + '}', CGI.escape(pki_ezsignannotation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignannotationGetObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignannotationApi.ezsignannotation_get_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignannotationApi#ezsignannotation_get_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
