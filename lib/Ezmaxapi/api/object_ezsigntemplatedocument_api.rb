=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.11.0

=end

require 'cgi'

module EzmaxApi
  class ObjectEzsigntemplatedocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new Ezsigntemplatedocument
    # The endpoint allows to create one or many elements at once.
    # @param ezsigntemplatedocument_create_object_v1_request [EzsigntemplatedocumentCreateObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentCreateObjectV1Response]
    def ezsigntemplatedocument_create_object_v1(ezsigntemplatedocument_create_object_v1_request, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_create_object_v1_with_http_info(ezsigntemplatedocument_create_object_v1_request, opts)
      data
    end

    # Create a new Ezsigntemplatedocument
    # The endpoint allows to create one or many elements at once.
    # @param ezsigntemplatedocument_create_object_v1_request [EzsigntemplatedocumentCreateObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentCreateObjectV1Response, Integer, Hash)>] EzsigntemplatedocumentCreateObjectV1Response data, response status code and response headers
    def ezsigntemplatedocument_create_object_v1_with_http_info(ezsigntemplatedocument_create_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_create_object_v1 ...'
      end
      # verify the required parameter 'ezsigntemplatedocument_create_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsigntemplatedocument_create_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigntemplatedocument_create_object_v1_request' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_create_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigntemplatedocument_create_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentCreateObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_create_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_create_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit multiple Ezsigntemplatedocumentpagerecognitions
    # Edit multiple Ezsigntemplatedocumentpagerecognitions
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_request [EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response]
    def ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_request, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_request, opts)
      data
    end

    # Edit multiple Ezsigntemplatedocumentpagerecognitions
    # Edit multiple Ezsigntemplatedocumentpagerecognitions
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_request [EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response, Integer, Hash)>] EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response data, response status code and response headers
    def ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_request' is set
      if @api_client.config.client_side_validation && ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_request' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatedocumentpagerecognitions'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentEditEzsigntemplatedocumentpagerecognitionsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_edit_ezsigntemplatedocumentpagerecognitions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit multiple Ezsigntemplateformfieldgroups
    # Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request [EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response]
    def ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request, opts)
      data
    end

    # Edit multiple Ezsigntemplateformfieldgroups
    # Using this endpoint, you can edit multiple Ezsigntemplateformfieldgroups at the same time.
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request [EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response, Integer, Hash)>] EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response data, response status code and response headers
    def ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request' is set
      if @api_client.config.client_side_validation && ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplateformfieldgroups'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentEditEzsigntemplateformfieldgroupsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_edit_ezsigntemplateformfieldgroups_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit multiple Ezsigntemplatesignatures
    # Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request [EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response]
    def ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request, opts)
      data
    end

    # Edit multiple Ezsigntemplatesignatures
    # Using this endpoint, you can edit multiple Ezsigntemplatesignatures at the same time.
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request [EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response, Integer, Hash)>] EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response data, response status code and response headers
    def ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request' is set
      if @api_client.config.client_side_validation && ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/editEzsigntemplatesignatures'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentEditEzsigntemplatesignaturesV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_edit_ezsigntemplatesignatures_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an existing Ezsigntemplatedocument
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_edit_object_v1_request [EzsigntemplatedocumentEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentEditObjectV1Response]
    def ezsigntemplatedocument_edit_object_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_object_v1_request, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_edit_object_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_object_v1_request, opts)
      data
    end

    # Edit an existing Ezsigntemplatedocument
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_edit_object_v1_request [EzsigntemplatedocumentEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentEditObjectV1Response, Integer, Hash)>] EzsigntemplatedocumentEditObjectV1Response data, response status code and response headers
    def ezsigntemplatedocument_edit_object_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_edit_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_object_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigntemplatedocument_edit_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsigntemplatedocument_edit_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigntemplatedocument_edit_object_v1_request' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigntemplatedocument_edit_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentEditObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_edit_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_edit_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract text from Ezsigntemplatedocument area
    # Extract text from Ezsigntemplatedocument area
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_extract_text_v1_request [EzsigntemplatedocumentExtractTextV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentExtractTextV1Response]
    def ezsigntemplatedocument_extract_text_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_extract_text_v1_request, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_extract_text_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_extract_text_v1_request, opts)
      data
    end

    # Extract text from Ezsigntemplatedocument area
    # Extract text from Ezsigntemplatedocument area
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_extract_text_v1_request [EzsigntemplatedocumentExtractTextV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentExtractTextV1Response, Integer, Hash)>] EzsigntemplatedocumentExtractTextV1Response data, response status code and response headers
    def ezsigntemplatedocument_extract_text_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_extract_text_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_extract_text_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_extract_text_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_extract_text_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigntemplatedocument_extract_text_v1_request' is set
      if @api_client.config.client_side_validation && ezsigntemplatedocument_extract_text_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigntemplatedocument_extract_text_v1_request' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_extract_text_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/extractText'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigntemplatedocument_extract_text_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentExtractTextV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_extract_text_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_extract_text_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Flatten
    # Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentFlattenV1Response]
    def ezsigntemplatedocument_flatten_v1(pki_ezsigntemplatedocument_id, body, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_flatten_v1_with_http_info(pki_ezsigntemplatedocument_id, body, opts)
      data
    end

    # Flatten
    # Flatten an Ezsigntemplatedocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentFlattenV1Response, Integer, Hash)>] EzsigntemplatedocumentFlattenV1Response data, response status code and response headers
    def ezsigntemplatedocument_flatten_v1_with_http_info(pki_ezsigntemplatedocument_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_flatten_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_flatten_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_flatten_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_flatten_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/flatten'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentFlattenV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_flatten_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_flatten_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpagerecognitions
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response]
    def ezsigntemplatedocument_get_ezsigntemplatedocumentpagerecognitions_v1(pki_ezsigntemplatedocument_id, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_get_ezsigntemplatedocumentpagerecognitions_v1_with_http_info(pki_ezsigntemplatedocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpagerecognitions
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response, Integer, Hash)>] EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response data, response status code and response headers
    def ezsigntemplatedocument_get_ezsigntemplatedocumentpagerecognitions_v1_with_http_info(pki_ezsigntemplatedocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatedocumentpagerecognitions_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatedocumentpagerecognitions_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatedocumentpagerecognitions_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpagerecognitions'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentGetEzsigntemplatedocumentpagerecognitionsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatedocumentpagerecognitions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_get_ezsigntemplatedocumentpagerecognitions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatedocumentpages
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response]
    def ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1(pki_ezsigntemplatedocument_id, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1_with_http_info(pki_ezsigntemplatedocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatedocumentpages
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response, Integer, Hash)>] EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response data, response status code and response headers
    def ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1_with_http_info(pki_ezsigntemplatedocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatedocumentpages'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentGetEzsigntemplatedocumentpagesV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_get_ezsigntemplatedocumentpages_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigntemplatedocument's Ezsigntemplateformfieldgroups
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response]
    def ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1(pki_ezsigntemplatedocument_id, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1_with_http_info(pki_ezsigntemplatedocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplateformfieldgroups
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response, Integer, Hash)>] EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response data, response status code and response headers
    def ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1_with_http_info(pki_ezsigntemplatedocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplateformfieldgroups'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentGetEzsigntemplateformfieldgroupsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_get_ezsigntemplateformfieldgroups_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigntemplatedocument's Ezsigntemplatesignatures
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response]
    def ezsigntemplatedocument_get_ezsigntemplatesignatures_v1(pki_ezsigntemplatedocument_id, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_get_ezsigntemplatesignatures_v1_with_http_info(pki_ezsigntemplatedocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigntemplatedocument&#39;s Ezsigntemplatesignatures
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response, Integer, Hash)>] EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response data, response status code and response headers
    def ezsigntemplatedocument_get_ezsigntemplatesignatures_v1_with_http_info(pki_ezsigntemplatedocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatesignatures_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatesignatures_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatesignatures_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getEzsigntemplatesignatures'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentGetEzsigntemplatesignaturesV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_ezsigntemplatesignatures_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_get_ezsigntemplatesignatures_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigntemplatedocument
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentGetObjectV2Response]
    def ezsigntemplatedocument_get_object_v2(pki_ezsigntemplatedocument_id, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_get_object_v2_with_http_info(pki_ezsigntemplatedocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigntemplatedocument
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentGetObjectV2Response, Integer, Hash)>] EzsigntemplatedocumentGetObjectV2Response data, response status code and response headers
    def ezsigntemplatedocument_get_object_v2_with_http_info(pki_ezsigntemplatedocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_object_v2 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_object_v2"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_object_v2, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/2/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentGetObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_get_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve positions X,Y of given words from a Ezsigntemplatedocument
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_get_words_positions_v1_request [EzsigntemplatedocumentGetWordsPositionsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentGetWordsPositionsV1Response]
    def ezsigntemplatedocument_get_words_positions_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_get_words_positions_v1_request, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_get_words_positions_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_get_words_positions_v1_request, opts)
      data
    end

    # Retrieve positions X,Y of given words from a Ezsigntemplatedocument
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_get_words_positions_v1_request [EzsigntemplatedocumentGetWordsPositionsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentGetWordsPositionsV1Response, Integer, Hash)>] EzsigntemplatedocumentGetWordsPositionsV1Response data, response status code and response headers
    def ezsigntemplatedocument_get_words_positions_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_get_words_positions_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_words_positions_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_words_positions_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_words_positions_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigntemplatedocument_get_words_positions_v1_request' is set
      if @api_client.config.client_side_validation && ezsigntemplatedocument_get_words_positions_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigntemplatedocument_get_words_positions_v1_request' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_words_positions_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}/getWordsPositions'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigntemplatedocument_get_words_positions_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentGetWordsPositionsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_get_words_positions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_get_words_positions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an existing Ezsigntemplatedocument
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_patch_object_v1_request [EzsigntemplatedocumentPatchObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigntemplatedocumentPatchObjectV1Response]
    def ezsigntemplatedocument_patch_object_v1(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_patch_object_v1_request, opts = {})
      data, _status_code, _headers = ezsigntemplatedocument_patch_object_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_patch_object_v1_request, opts)
      data
    end

    # Patch an existing Ezsigntemplatedocument
    # 
    # @param pki_ezsigntemplatedocument_id [Integer] 
    # @param ezsigntemplatedocument_patch_object_v1_request [EzsigntemplatedocumentPatchObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigntemplatedocumentPatchObjectV1Response, Integer, Hash)>] EzsigntemplatedocumentPatchObjectV1Response data, response status code and response headers
    def ezsigntemplatedocument_patch_object_v1_with_http_info(pki_ezsigntemplatedocument_id, ezsigntemplatedocument_patch_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_patch_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsigntemplatedocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigntemplatedocument_id' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_patch_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigntemplatedocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigntemplatedocument_id" when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_patch_object_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigntemplatedocument_patch_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsigntemplatedocument_patch_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigntemplatedocument_patch_object_v1_request' when calling ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_patch_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigntemplatedocument/{pkiEzsigntemplatedocumentID}'.sub('{' + 'pkiEzsigntemplatedocumentID' + '}', CGI.escape(pki_ezsigntemplatedocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigntemplatedocument_patch_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigntemplatedocumentPatchObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigntemplatedocumentApi.ezsigntemplatedocument_patch_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigntemplatedocumentApi#ezsigntemplatedocument_patch_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
