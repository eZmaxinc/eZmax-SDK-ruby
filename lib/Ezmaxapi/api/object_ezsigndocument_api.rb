=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.4.0

=end

require 'cgi'

module EzmaxApi
  class ObjectEzsigndocumentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Apply an Ezsigntemplate to the Ezsigndocument.
    # This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \"E\" to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_apply_ezsigntemplate_v1_request [EzsigndocumentApplyEzsigntemplateV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentApplyEzsigntemplateV1Response]
    def ezsigndocument_apply_ezsigntemplate_v1(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_apply_ezsigntemplate_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v1_request, opts)
      data
    end

    # Apply an Ezsigntemplate to the Ezsigndocument.
    # This function is deprecated. Please use *applyEzsigntemplate* instead which is doing the same thing but with a capital \&quot;E\&quot; to normalize the nomenclature.  This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_apply_ezsigntemplate_v1_request [EzsigndocumentApplyEzsigntemplateV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentApplyEzsigntemplateV1Response, Integer, Hash)>] EzsigndocumentApplyEzsigntemplateV1Response data, response status code and response headers
    def ezsigndocument_apply_ezsigntemplate_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_apply_ezsigntemplate_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_apply_ezsigntemplate_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_apply_ezsigntemplate_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyezsigntemplate'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_apply_ezsigntemplate_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentApplyEzsigntemplateV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_apply_ezsigntemplate_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apply an Ezsigntemplate to the Ezsigndocument.
    # This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_apply_ezsigntemplate_v2_request [EzsigndocumentApplyEzsigntemplateV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentApplyEzsigntemplateV2Response]
    def ezsigndocument_apply_ezsigntemplate_v2(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v2_request, opts = {})
      data, _status_code, _headers = ezsigndocument_apply_ezsigntemplate_v2_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v2_request, opts)
      data
    end

    # Apply an Ezsigntemplate to the Ezsigndocument.
    # This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_apply_ezsigntemplate_v2_request [EzsigndocumentApplyEzsigntemplateV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentApplyEzsigntemplateV2Response, Integer, Hash)>] EzsigndocumentApplyEzsigntemplateV2Response data, response status code and response headers
    def ezsigndocument_apply_ezsigntemplate_v2_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplate_v2_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v2 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v2"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v2, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_apply_ezsigntemplate_v2_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_apply_ezsigntemplate_v2_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_apply_ezsigntemplate_v2_request' when calling ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v2"
      end
      # resource path
      local_var_path = '/2/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplate'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_apply_ezsigntemplate_v2_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentApplyEzsigntemplateV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplate_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_apply_ezsigntemplate_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Apply an Ezsigntemplateglobal to the Ezsigndocument.
    # This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_apply_ezsigntemplateglobal_v1_request [EzsigndocumentApplyEzsigntemplateglobalV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentApplyEzsigntemplateglobalV1Response]
    def ezsigndocument_apply_ezsigntemplateglobal_v1(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplateglobal_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_apply_ezsigntemplateglobal_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplateglobal_v1_request, opts)
      data
    end

    # Apply an Ezsigntemplateglobal to the Ezsigndocument.
    # This endpoint applies a predefined template to the ezsign document. This allows to automatically apply all the form and signature fields on a document in a single step.  The document must not already have fields otherwise an error will be returned.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_apply_ezsigntemplateglobal_v1_request [EzsigndocumentApplyEzsigntemplateglobalV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentApplyEzsigntemplateglobalV1Response, Integer, Hash)>] EzsigndocumentApplyEzsigntemplateglobalV1Response data, response status code and response headers
    def ezsigndocument_apply_ezsigntemplateglobal_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_apply_ezsigntemplateglobal_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplateglobal_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplateglobal_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplateglobal_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_apply_ezsigntemplateglobal_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_apply_ezsigntemplateglobal_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_apply_ezsigntemplateglobal_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplateglobal_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/applyEzsigntemplateglobal'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_apply_ezsigntemplateglobal_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentApplyEzsigntemplateglobalV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_apply_ezsigntemplateglobal_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_apply_ezsigntemplateglobal_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create multiple Ezsignsignatures/Ezsignformfieldgroups
    # Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_create_ezsignelements_positioned_by_word_v1_request [EzsigndocumentCreateEzsignelementsPositionedByWordV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentCreateEzsignelementsPositionedByWordV1Response]
    def ezsigndocument_create_ezsignelements_positioned_by_word_v1(pki_ezsigndocument_id, ezsigndocument_create_ezsignelements_positioned_by_word_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_create_ezsignelements_positioned_by_word_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_create_ezsignelements_positioned_by_word_v1_request, opts)
      data
    end

    # Create multiple Ezsignsignatures/Ezsignformfieldgroups
    # Using this endpoint, you can create multiple Ezsignsignatures/Ezsignformfieldgroups positioned by word at the same time.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_create_ezsignelements_positioned_by_word_v1_request [EzsigndocumentCreateEzsignelementsPositionedByWordV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentCreateEzsignelementsPositionedByWordV1Response, Integer, Hash)>] EzsigndocumentCreateEzsignelementsPositionedByWordV1Response data, response status code and response headers
    def ezsigndocument_create_ezsignelements_positioned_by_word_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_create_ezsignelements_positioned_by_word_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_create_ezsignelements_positioned_by_word_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_create_ezsignelements_positioned_by_word_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_create_ezsignelements_positioned_by_word_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_create_ezsignelements_positioned_by_word_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_create_ezsignelements_positioned_by_word_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_create_ezsignelements_positioned_by_word_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_create_ezsignelements_positioned_by_word_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/createEzsignelementsPositionedByWord'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_create_ezsignelements_positioned_by_word_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentCreateEzsignelementsPositionedByWordV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_create_ezsignelements_positioned_by_word_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_create_ezsignelements_positioned_by_word_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Ezsigndocument
    # The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
    # @param ezsigndocument_create_object_v1_request [Array<EzsigndocumentCreateObjectV1Request>] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentCreateObjectV1Response]
    def ezsigndocument_create_object_v1(ezsigndocument_create_object_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_create_object_v1_with_http_info(ezsigndocument_create_object_v1_request, opts)
      data
    end

    # Create a new Ezsigndocument
    # The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
    # @param ezsigndocument_create_object_v1_request [Array<EzsigndocumentCreateObjectV1Request>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentCreateObjectV1Response, Integer, Hash)>] EzsigndocumentCreateObjectV1Response data, response status code and response headers
    def ezsigndocument_create_object_v1_with_http_info(ezsigndocument_create_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_create_object_v1 ...'
      end
      # verify the required parameter 'ezsigndocument_create_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_create_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_create_object_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_create_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_create_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentCreateObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_create_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_create_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Ezsigndocument
    # The endpoint allows to create one or many elements at once.
    # @param ezsigndocument_create_object_v2_request [EzsigndocumentCreateObjectV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentCreateObjectV2Response]
    def ezsigndocument_create_object_v2(ezsigndocument_create_object_v2_request, opts = {})
      data, _status_code, _headers = ezsigndocument_create_object_v2_with_http_info(ezsigndocument_create_object_v2_request, opts)
      data
    end

    # Create a new Ezsigndocument
    # The endpoint allows to create one or many elements at once.
    # @param ezsigndocument_create_object_v2_request [EzsigndocumentCreateObjectV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentCreateObjectV2Response, Integer, Hash)>] EzsigndocumentCreateObjectV2Response data, response status code and response headers
    def ezsigndocument_create_object_v2_with_http_info(ezsigndocument_create_object_v2_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_create_object_v2 ...'
      end
      # verify the required parameter 'ezsigndocument_create_object_v2_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_create_object_v2_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_create_object_v2_request' when calling ObjectEzsigndocumentApi.ezsigndocument_create_object_v2"
      end
      # resource path
      local_var_path = '/2/object/ezsigndocument'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_create_object_v2_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentCreateObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_create_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_create_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Decline to sign
    # Decline to sign
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_decline_to_sign_v1_request [EzsigndocumentDeclineToSignV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentDeclineToSignV1Response]
    def ezsigndocument_decline_to_sign_v1(pki_ezsigndocument_id, ezsigndocument_decline_to_sign_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_decline_to_sign_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_decline_to_sign_v1_request, opts)
      data
    end

    # Decline to sign
    # Decline to sign
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_decline_to_sign_v1_request [EzsigndocumentDeclineToSignV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentDeclineToSignV1Response, Integer, Hash)>] EzsigndocumentDeclineToSignV1Response data, response status code and response headers
    def ezsigndocument_decline_to_sign_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_decline_to_sign_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_decline_to_sign_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_decline_to_sign_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_decline_to_sign_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_decline_to_sign_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_decline_to_sign_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_decline_to_sign_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_decline_to_sign_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/declineToSign'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_decline_to_sign_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentDeclineToSignV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_decline_to_sign_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_decline_to_sign_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Ezsigndocument
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentDeleteObjectV1Response]
    def ezsigndocument_delete_object_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_delete_object_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Delete an existing Ezsigndocument
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentDeleteObjectV1Response, Integer, Hash)>] EzsigndocumentDeleteObjectV1Response data, response status code and response headers
    def ezsigndocument_delete_object_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_delete_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_delete_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_delete_object_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentDeleteObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_delete_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_delete_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit multiple Ezsignformfieldgroups
    # Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_edit_ezsignformfieldgroups_v1_request [EzsigndocumentEditEzsignformfieldgroupsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentEditEzsignformfieldgroupsV1Response]
    def ezsigndocument_edit_ezsignformfieldgroups_v1(pki_ezsigndocument_id, ezsigndocument_edit_ezsignformfieldgroups_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_edit_ezsignformfieldgroups_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_edit_ezsignformfieldgroups_v1_request, opts)
      data
    end

    # Edit multiple Ezsignformfieldgroups
    # Using this endpoint, you can edit multiple Ezsignformfieldgroups at the same time.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_edit_ezsignformfieldgroups_v1_request [EzsigndocumentEditEzsignformfieldgroupsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentEditEzsignformfieldgroupsV1Response, Integer, Hash)>] EzsigndocumentEditEzsignformfieldgroupsV1Response data, response status code and response headers
    def ezsigndocument_edit_ezsignformfieldgroups_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_edit_ezsignformfieldgroups_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignformfieldgroups_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignformfieldgroups_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignformfieldgroups_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_edit_ezsignformfieldgroups_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_edit_ezsignformfieldgroups_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_edit_ezsignformfieldgroups_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignformfieldgroups_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignformfieldgroups'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_edit_ezsignformfieldgroups_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentEditEzsignformfieldgroupsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignformfieldgroups_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_edit_ezsignformfieldgroups_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit multiple Ezsignsignatures
    # Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_edit_ezsignsignatures_v1_request [EzsigndocumentEditEzsignsignaturesV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentEditEzsignsignaturesV1Response]
    def ezsigndocument_edit_ezsignsignatures_v1(pki_ezsigndocument_id, ezsigndocument_edit_ezsignsignatures_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_edit_ezsignsignatures_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_edit_ezsignsignatures_v1_request, opts)
      data
    end

    # Edit multiple Ezsignsignatures
    # Using this endpoint, you can edit multiple Ezsignsignatures at the same time.
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_edit_ezsignsignatures_v1_request [EzsigndocumentEditEzsignsignaturesV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentEditEzsignsignaturesV1Response, Integer, Hash)>] EzsigndocumentEditEzsignsignaturesV1Response data, response status code and response headers
    def ezsigndocument_edit_ezsignsignatures_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_edit_ezsignsignatures_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignsignatures_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignsignatures_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignsignatures_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_edit_ezsignsignatures_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_edit_ezsignsignatures_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_edit_ezsignsignatures_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignsignatures_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/editEzsignsignatures'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_edit_ezsignsignatures_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentEditEzsignsignaturesV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_edit_ezsignsignatures_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_edit_ezsignsignatures_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # End prematurely
    # End prematurely an Ezsigndocument when some signatures are still required
    # @param pki_ezsigndocument_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentEndPrematurelyV1Response]
    def ezsigndocument_end_prematurely_v1(pki_ezsigndocument_id, body, opts = {})
      data, _status_code, _headers = ezsigndocument_end_prematurely_v1_with_http_info(pki_ezsigndocument_id, body, opts)
      data
    end

    # End prematurely
    # End prematurely an Ezsigndocument when some signatures are still required
    # @param pki_ezsigndocument_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentEndPrematurelyV1Response, Integer, Hash)>] EzsigndocumentEndPrematurelyV1Response data, response status code and response headers
    def ezsigndocument_end_prematurely_v1_with_http_info(pki_ezsigndocument_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_end_prematurely_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_end_prematurely_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_end_prematurely_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectEzsigndocumentApi.ezsigndocument_end_prematurely_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/endPrematurely'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentEndPrematurelyV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_end_prematurely_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_end_prematurely_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Flatten
    # Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
    # @param pki_ezsigndocument_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentFlattenV1Response]
    def ezsigndocument_flatten_v1(pki_ezsigndocument_id, body, opts = {})
      data, _status_code, _headers = ezsigndocument_flatten_v1_with_http_info(pki_ezsigndocument_id, body, opts)
      data
    end

    # Flatten
    # Flatten an Ezsigndocument signatures, forms and annotations. This process finalizes the PDF so that the forms and annotations become part of the document content and cannot be edited.
    # @param pki_ezsigndocument_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentFlattenV1Response, Integer, Hash)>] EzsigndocumentFlattenV1Response data, response status code and response headers
    def ezsigndocument_flatten_v1_with_http_info(pki_ezsigndocument_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_flatten_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_flatten_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_flatten_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectEzsigndocumentApi.ezsigndocument_flatten_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/flatten'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentFlattenV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_flatten_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_flatten_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve actionable elements for the Ezsigndocument
    # Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetActionableElementsV1Response]
    def ezsigndocument_get_actionable_elements_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_actionable_elements_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve actionable elements for the Ezsigndocument
    # Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetActionableElementsV1Response, Integer, Hash)>] EzsigndocumentGetActionableElementsV1Response data, response status code and response headers
    def ezsigndocument_get_actionable_elements_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_actionable_elements_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_actionable_elements_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_actionable_elements_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getActionableElements'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetActionableElementsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_actionable_elements_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_actionable_elements_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Ezsigndocument's Attachments
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetAttachmentsV1Response]
    def ezsigndocument_get_attachments_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_attachments_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve Ezsigndocument&#39;s Attachments
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetAttachmentsV1Response, Integer, Hash)>] EzsigndocumentGetAttachmentsV1Response data, response status code and response headers
    def ezsigndocument_get_attachments_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_attachments_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_attachments_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_attachments_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getAttachments'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetAttachmentsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_attachments_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_attachments_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve completed elements for the Ezsigndocument
    # Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetCompletedElementsV1Response]
    def ezsigndocument_get_completed_elements_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_completed_elements_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve completed elements for the Ezsigndocument
    # Return the completed Ezsignsignatures, Ezsignformfieldgroups and Ezsignannotations at the current step in the process
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetCompletedElementsV1Response, Integer, Hash)>] EzsigndocumentGetCompletedElementsV1Response data, response status code and response headers
    def ezsigndocument_get_completed_elements_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_completed_elements_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_completed_elements_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_completed_elements_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getCompletedElements'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetCompletedElementsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_completed_elements_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_completed_elements_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a URL to download documents.
    # This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
    # @param pki_ezsigndocument_id [Integer] 
    # @param e_document_type [String] The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetDownloadUrlV1Response]
    def ezsigndocument_get_download_url_v1(pki_ezsigndocument_id, e_document_type, opts = {})
      data, _status_code, _headers = ezsigndocument_get_download_url_v1_with_http_info(pki_ezsigndocument_id, e_document_type, opts)
      data
    end

    # Retrieve a URL to download documents.
    # This endpoint returns URLs to different files that can be downloaded during the signing process.  These links will expire after 5 minutes so the download of the file should be made soon after retrieving the link.
    # @param pki_ezsigndocument_id [Integer] 
    # @param e_document_type [String] The type of document to retrieve.  1. **Initial** Is the initial document before any signature were applied. 2. **SignatureReady** Is the version containing the annotations/form to show the signer. 3. **Signed** Is the final document once all signatures were applied in current document if eEzsignfolderCompletion is PerEzsigndocument.&lt;br&gt;     Is the final document once all signatures were applied in all documents if eEzsignfolderCompletion is PerEzsignfolder. 4. **Proofdocument** Is the evidence report. 5. **Proof** Is the complete evidence archive including all of the above and more. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetDownloadUrlV1Response, Integer, Hash)>] EzsigndocumentGetDownloadUrlV1Response data, response status code and response headers
    def ezsigndocument_get_download_url_v1_with_http_info(pki_ezsigndocument_id, e_document_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_download_url_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_download_url_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_download_url_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'e_document_type' is set
      if @api_client.config.client_side_validation && e_document_type.nil?
        fail ArgumentError, "Missing the required parameter 'e_document_type' when calling ObjectEzsigndocumentApi.ezsigndocument_get_download_url_v1"
      end
      # verify enum value
      allowable_values = ["Initial", "SignatureReady", "Signed", "Proof", "Proofdocument"]
      if @api_client.config.client_side_validation && !allowable_values.include?(e_document_type)
        fail ArgumentError, "invalid value for \"e_document_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getDownloadUrl/{eDocumentType}'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s)).sub('{' + 'eDocumentType' + '}', CGI.escape(e_document_type.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetDownloadUrlV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_download_url_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_download_url_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigndocument's Ezsignannotations
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetEzsignannotationsV1Response]
    def ezsigndocument_get_ezsignannotations_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_ezsignannotations_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigndocument&#39;s Ezsignannotations
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetEzsignannotationsV1Response, Integer, Hash)>] EzsigndocumentGetEzsignannotationsV1Response data, response status code and response headers
    def ezsigndocument_get_ezsignannotations_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_ezsignannotations_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignannotations_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignannotations_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignannotations'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetEzsignannotationsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_ezsignannotations_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_ezsignannotations_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigndocument's Ezsigndiscussions
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetEzsigndiscussionsV1Response]
    def ezsigndocument_get_ezsigndiscussions_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_ezsigndiscussions_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigndocument&#39;s Ezsigndiscussions
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetEzsigndiscussionsV1Response, Integer, Hash)>] EzsigndocumentGetEzsigndiscussionsV1Response data, response status code and response headers
    def ezsigndocument_get_ezsigndiscussions_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_ezsigndiscussions_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsigndiscussions_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsigndiscussions_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsigndiscussions'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetEzsigndiscussionsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_ezsigndiscussions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_ezsigndiscussions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigndocument's Ezsignformfieldgroups
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetEzsignformfieldgroupsV1Response]
    def ezsigndocument_get_ezsignformfieldgroups_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_ezsignformfieldgroups_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigndocument&#39;s Ezsignformfieldgroups
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetEzsignformfieldgroupsV1Response, Integer, Hash)>] EzsigndocumentGetEzsignformfieldgroupsV1Response data, response status code and response headers
    def ezsigndocument_get_ezsignformfieldgroups_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_ezsignformfieldgroups_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignformfieldgroups_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignformfieldgroups_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignformfieldgroups'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetEzsignformfieldgroupsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_ezsignformfieldgroups_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_ezsignformfieldgroups_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigndocument's Ezsignpages
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetEzsignpagesV1Response]
    def ezsigndocument_get_ezsignpages_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_ezsignpages_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigndocument&#39;s Ezsignpages
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetEzsignpagesV1Response, Integer, Hash)>] EzsigndocumentGetEzsignpagesV1Response data, response status code and response headers
    def ezsigndocument_get_ezsignpages_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_ezsignpages_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignpages_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignpages_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignpages'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetEzsignpagesV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_ezsignpages_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_ezsignpages_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigndocument's automatic Ezsignsignatures
    # Return the Ezsignsignatures that can be signed by the current user at the current step in the process
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetEzsignsignaturesAutomaticV1Response]
    def ezsigndocument_get_ezsignsignatures_automatic_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigndocument&#39;s automatic Ezsignsignatures
    # Return the Ezsignsignatures that can be signed by the current user at the current step in the process
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetEzsignsignaturesAutomaticV1Response, Integer, Hash)>] EzsigndocumentGetEzsignsignaturesAutomaticV1Response data, response status code and response headers
    def ezsigndocument_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_ezsignsignatures_automatic_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignsignatures_automatic_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignsignatures_automatic_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignaturesAutomatic'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetEzsignsignaturesAutomaticV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_ezsignsignatures_automatic_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_ezsignsignatures_automatic_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigndocument's Ezsignsignatures
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetEzsignsignaturesV1Response]
    def ezsigndocument_get_ezsignsignatures_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_ezsignsignatures_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigndocument&#39;s Ezsignsignatures
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetEzsignsignaturesV1Response, Integer, Hash)>] EzsigndocumentGetEzsignsignaturesV1Response data, response status code and response headers
    def ezsigndocument_get_ezsignsignatures_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_ezsignsignatures_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignsignatures_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_ezsignsignatures_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getEzsignsignatures'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetEzsignsignaturesV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_ezsignsignatures_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_ezsignsignatures_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigndocument's Form Data
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetFormDataV1Response]
    def ezsigndocument_get_form_data_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_form_data_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigndocument&#39;s Form Data
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetFormDataV1Response, Integer, Hash)>] EzsigndocumentGetFormDataV1Response data, response status code and response headers
    def ezsigndocument_get_form_data_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_form_data_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_form_data_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_form_data_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getFormData'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/zip', 'text/csv'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetFormDataV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_form_data_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_form_data_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigndocument
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetObjectV1Response]
    def ezsigndocument_get_object_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_object_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigndocument
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetObjectV1Response, Integer, Hash)>] EzsigndocumentGetObjectV1Response data, response status code and response headers
    def ezsigndocument_get_object_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_object_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsigndocument
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetObjectV2Response]
    def ezsigndocument_get_object_v2(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_object_v2_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve an existing Ezsigndocument
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetObjectV2Response, Integer, Hash)>] EzsigndocumentGetObjectV2Response data, response status code and response headers
    def ezsigndocument_get_object_v2_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_object_v2 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_object_v2"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_object_v2, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/2/object/ezsigndocument/{pkiEzsigndocumentID}'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the temporary proof
    # Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn't available until the Ezsigndocument is completed
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetTemporaryProofV1Response]
    def ezsigndocument_get_temporary_proof_v1(pki_ezsigndocument_id, opts = {})
      data, _status_code, _headers = ezsigndocument_get_temporary_proof_v1_with_http_info(pki_ezsigndocument_id, opts)
      data
    end

    # Retrieve the temporary proof
    # Retrieve the temporary proof while the Ezsigndocument is being processed since the proof isn&#39;t available until the Ezsigndocument is completed
    # @param pki_ezsigndocument_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetTemporaryProofV1Response, Integer, Hash)>] EzsigndocumentGetTemporaryProofV1Response data, response status code and response headers
    def ezsigndocument_get_temporary_proof_v1_with_http_info(pki_ezsigndocument_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_temporary_proof_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_temporary_proof_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_temporary_proof_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getTemporaryProof'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetTemporaryProofV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_temporary_proof_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_temporary_proof_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve positions X,Y of given words from a Ezsigndocument
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_get_words_positions_v1_request [EzsigndocumentGetWordsPositionsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentGetWordsPositionsV1Response]
    def ezsigndocument_get_words_positions_v1(pki_ezsigndocument_id, ezsigndocument_get_words_positions_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_get_words_positions_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_get_words_positions_v1_request, opts)
      data
    end

    # Retrieve positions X,Y of given words from a Ezsigndocument
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_get_words_positions_v1_request [EzsigndocumentGetWordsPositionsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentGetWordsPositionsV1Response, Integer, Hash)>] EzsigndocumentGetWordsPositionsV1Response data, response status code and response headers
    def ezsigndocument_get_words_positions_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_get_words_positions_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_get_words_positions_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_get_words_positions_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_get_words_positions_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_get_words_positions_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_get_words_positions_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_get_words_positions_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_get_words_positions_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/getWordsPositions'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_get_words_positions_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentGetWordsPositionsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_get_words_positions_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_get_words_positions_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an existing Ezsigndocument
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_patch_object_v1_request [EzsigndocumentPatchObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentPatchObjectV1Response]
    def ezsigndocument_patch_object_v1(pki_ezsigndocument_id, ezsigndocument_patch_object_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_patch_object_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_patch_object_v1_request, opts)
      data
    end

    # Patch an existing Ezsigndocument
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_patch_object_v1_request [EzsigndocumentPatchObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentPatchObjectV1Response, Integer, Hash)>] EzsigndocumentPatchObjectV1Response data, response status code and response headers
    def ezsigndocument_patch_object_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_patch_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_patch_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_patch_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_patch_object_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_patch_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_patch_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_patch_object_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_patch_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_patch_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentPatchObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_patch_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_patch_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Submit the Ezsignform
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_submit_ezsignform_v1_request [EzsigndocumentSubmitEzsignformV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentSubmitEzsignformV1Response]
    def ezsigndocument_submit_ezsignform_v1(pki_ezsigndocument_id, ezsigndocument_submit_ezsignform_v1_request, opts = {})
      data, _status_code, _headers = ezsigndocument_submit_ezsignform_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_submit_ezsignform_v1_request, opts)
      data
    end

    # Submit the Ezsignform
    # 
    # @param pki_ezsigndocument_id [Integer] 
    # @param ezsigndocument_submit_ezsignform_v1_request [EzsigndocumentSubmitEzsignformV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentSubmitEzsignformV1Response, Integer, Hash)>] EzsigndocumentSubmitEzsignformV1Response data, response status code and response headers
    def ezsigndocument_submit_ezsignform_v1_with_http_info(pki_ezsigndocument_id, ezsigndocument_submit_ezsignform_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_submit_ezsignform_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_submit_ezsignform_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_submit_ezsignform_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsigndocument_submit_ezsignform_v1_request' is set
      if @api_client.config.client_side_validation && ezsigndocument_submit_ezsignform_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsigndocument_submit_ezsignform_v1_request' when calling ObjectEzsigndocumentApi.ezsigndocument_submit_ezsignform_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/submitEzsignform'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsigndocument_submit_ezsignform_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentSubmitEzsignformV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_submit_ezsignform_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_submit_ezsignform_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsend the Ezsigndocument
    # Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
    # @param pki_ezsigndocument_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [EzsigndocumentUnsendV1Response]
    def ezsigndocument_unsend_v1(pki_ezsigndocument_id, body, opts = {})
      data, _status_code, _headers = ezsigndocument_unsend_v1_with_http_info(pki_ezsigndocument_id, body, opts)
      data
    end

    # Unsend the Ezsigndocument
    # Once an Ezsigndocument has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsigndocument and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on this Ezsigndocumentswill be lost.
    # @param pki_ezsigndocument_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsigndocumentUnsendV1Response, Integer, Hash)>] EzsigndocumentUnsendV1Response data, response status code and response headers
    def ezsigndocument_unsend_v1_with_http_info(pki_ezsigndocument_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsigndocumentApi.ezsigndocument_unsend_v1 ...'
      end
      # verify the required parameter 'pki_ezsigndocument_id' is set
      if @api_client.config.client_side_validation && pki_ezsigndocument_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsigndocument_id' when calling ObjectEzsigndocumentApi.ezsigndocument_unsend_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsigndocument_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsigndocument_id" when calling ObjectEzsigndocumentApi.ezsigndocument_unsend_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectEzsigndocumentApi.ezsigndocument_unsend_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsigndocument/{pkiEzsigndocumentID}/unsend'.sub('{' + 'pkiEzsigndocumentID' + '}', CGI.escape(pki_ezsigndocument_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsigndocumentUnsendV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsigndocumentApi.ezsigndocument_unsend_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsigndocumentApi#ezsigndocument_unsend_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
