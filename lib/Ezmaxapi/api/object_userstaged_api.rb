=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.2
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'cgi'

module EzmaxApi
  class ObjectUserstagedApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a User from a Userstaged and then map it
    # Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
    # @param pki_userstaged_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [UserstagedCreateUserV1Response]
    def userstaged_create_user_v1(pki_userstaged_id, body, opts = {})
      data, _status_code, _headers = userstaged_create_user_v1_with_http_info(pki_userstaged_id, body, opts)
      data
    end

    # Create a User from a Userstaged and then map it
    # Default values will be used while creating the User. If you need to change those values, you should use the route to edit a User.
    # @param pki_userstaged_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserstagedCreateUserV1Response, Integer, Hash)>] UserstagedCreateUserV1Response data, response status code and response headers
    def userstaged_create_user_v1_with_http_info(pki_userstaged_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserstagedApi.userstaged_create_user_v1 ...'
      end
      # verify the required parameter 'pki_userstaged_id' is set
      if @api_client.config.client_side_validation && pki_userstaged_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_userstaged_id' when calling ObjectUserstagedApi.userstaged_create_user_v1"
      end
      if @api_client.config.client_side_validation && pki_userstaged_id > 65535
        fail ArgumentError, 'invalid value for "pki_userstaged_id" when calling ObjectUserstagedApi.userstaged_create_user_v1, must be smaller than or equal to 65535.'
      end

      if @api_client.config.client_side_validation && pki_userstaged_id < 1
        fail ArgumentError, 'invalid value for "pki_userstaged_id" when calling ObjectUserstagedApi.userstaged_create_user_v1, must be greater than or equal to 1.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectUserstagedApi.userstaged_create_user_v1"
      end
      # resource path
      local_var_path = '/1/object/userstaged/{pkiUserstagedID}/createUser'.sub('{' + 'pkiUserstagedID' + '}', CGI.escape(pki_userstaged_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UserstagedCreateUserV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserstagedApi.userstaged_create_user_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserstagedApi#userstaged_create_user_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Userstaged
    # 
    # @param pki_userstaged_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [UserstagedDeleteObjectV1Response]
    def userstaged_delete_object_v1(pki_userstaged_id, opts = {})
      data, _status_code, _headers = userstaged_delete_object_v1_with_http_info(pki_userstaged_id, opts)
      data
    end

    # Delete an existing Userstaged
    # 
    # @param pki_userstaged_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserstagedDeleteObjectV1Response, Integer, Hash)>] UserstagedDeleteObjectV1Response data, response status code and response headers
    def userstaged_delete_object_v1_with_http_info(pki_userstaged_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserstagedApi.userstaged_delete_object_v1 ...'
      end
      # verify the required parameter 'pki_userstaged_id' is set
      if @api_client.config.client_side_validation && pki_userstaged_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_userstaged_id' when calling ObjectUserstagedApi.userstaged_delete_object_v1"
      end
      if @api_client.config.client_side_validation && pki_userstaged_id > 65535
        fail ArgumentError, 'invalid value for "pki_userstaged_id" when calling ObjectUserstagedApi.userstaged_delete_object_v1, must be smaller than or equal to 65535.'
      end

      if @api_client.config.client_side_validation && pki_userstaged_id < 1
        fail ArgumentError, 'invalid value for "pki_userstaged_id" when calling ObjectUserstagedApi.userstaged_delete_object_v1, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/1/object/userstaged/{pkiUserstagedID}'.sub('{' + 'pkiUserstagedID' + '}', CGI.escape(pki_userstaged_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserstagedDeleteObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserstagedApi.userstaged_delete_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserstagedApi#userstaged_delete_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Userstaged list
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_order_by Specify how you want the results to be sorted
    # @option opts [Integer] :i_row_max 
    # @option opts [Integer] :i_row_offset  (default to 0)
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @option opts [String] :s_filter 
    # @return [UserstagedGetListV1Response]
    def userstaged_get_list_v1(opts = {})
      data, _status_code, _headers = userstaged_get_list_v1_with_http_info(opts)
      data
    end

    # Retrieve Userstaged list
    # 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_order_by Specify how you want the results to be sorted
    # @option opts [Integer] :i_row_max 
    # @option opts [Integer] :i_row_offset  (default to 0)
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @option opts [String] :s_filter 
    # @return [Array<(UserstagedGetListV1Response, Integer, Hash)>] UserstagedGetListV1Response data, response status code and response headers
    def userstaged_get_list_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserstagedApi.userstaged_get_list_v1 ...'
      end
      allowable_values = ["pkiUserstagedID_ASC", "pkiUserstagedID_DESC", "sEmailAddress_ASC", "sEmailAddress_DESC", "sUserstagedFirstname_ASC", "sUserstagedFirstname_DESC", "sUserstagedLastname_ASC", "sUserstagedLastname_DESC", "sUserstagedExternalid_ASC", "sUserstagedExternalid_DESC"]
      if @api_client.config.client_side_validation && opts[:'e_order_by'] && !allowable_values.include?(opts[:'e_order_by'])
        fail ArgumentError, "invalid value for \"e_order_by\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'i_row_max'].nil? && opts[:'i_row_max'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"i_row_max"]" when calling ObjectUserstagedApi.userstaged_get_list_v1, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'i_row_max'].nil? && opts[:'i_row_max'] < 1
        fail ArgumentError, 'invalid value for "opts[:"i_row_max"]" when calling ObjectUserstagedApi.userstaged_get_list_v1, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'i_row_offset'].nil? && opts[:'i_row_offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"i_row_offset"]" when calling ObjectUserstagedApi.userstaged_get_list_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/userstaged/getList'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eOrderBy'] = opts[:'e_order_by'] if !opts[:'e_order_by'].nil?
      query_params[:'iRowMax'] = opts[:'i_row_max'] if !opts[:'i_row_max'].nil?
      query_params[:'iRowOffset'] = opts[:'i_row_offset'] if !opts[:'i_row_offset'].nil?
      query_params[:'sFilter'] = opts[:'s_filter'] if !opts[:'s_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']) unless header_params['Accept']
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserstagedGetListV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserstagedApi.userstaged_get_list_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserstagedApi#userstaged_get_list_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Userstaged
    # 
    # @param pki_userstaged_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [UserstagedGetObjectV2Response]
    def userstaged_get_object_v2(pki_userstaged_id, opts = {})
      data, _status_code, _headers = userstaged_get_object_v2_with_http_info(pki_userstaged_id, opts)
      data
    end

    # Retrieve an existing Userstaged
    # 
    # @param pki_userstaged_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserstagedGetObjectV2Response, Integer, Hash)>] UserstagedGetObjectV2Response data, response status code and response headers
    def userstaged_get_object_v2_with_http_info(pki_userstaged_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserstagedApi.userstaged_get_object_v2 ...'
      end
      # verify the required parameter 'pki_userstaged_id' is set
      if @api_client.config.client_side_validation && pki_userstaged_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_userstaged_id' when calling ObjectUserstagedApi.userstaged_get_object_v2"
      end
      if @api_client.config.client_side_validation && pki_userstaged_id > 65535
        fail ArgumentError, 'invalid value for "pki_userstaged_id" when calling ObjectUserstagedApi.userstaged_get_object_v2, must be smaller than or equal to 65535.'
      end

      if @api_client.config.client_side_validation && pki_userstaged_id < 1
        fail ArgumentError, 'invalid value for "pki_userstaged_id" when calling ObjectUserstagedApi.userstaged_get_object_v2, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/2/object/userstaged/{pkiUserstagedID}'.sub('{' + 'pkiUserstagedID' + '}', CGI.escape(pki_userstaged_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserstagedGetObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserstagedApi.userstaged_get_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserstagedApi#userstaged_get_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Map the Userstaged to an existing user
    # 
    # @param pki_userstaged_id [Integer] 
    # @param userstaged_map_v1_request [UserstagedMapV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [UserstagedMapV1Response]
    def userstaged_map_v1(pki_userstaged_id, userstaged_map_v1_request, opts = {})
      data, _status_code, _headers = userstaged_map_v1_with_http_info(pki_userstaged_id, userstaged_map_v1_request, opts)
      data
    end

    # Map the Userstaged to an existing user
    # 
    # @param pki_userstaged_id [Integer] 
    # @param userstaged_map_v1_request [UserstagedMapV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserstagedMapV1Response, Integer, Hash)>] UserstagedMapV1Response data, response status code and response headers
    def userstaged_map_v1_with_http_info(pki_userstaged_id, userstaged_map_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectUserstagedApi.userstaged_map_v1 ...'
      end
      # verify the required parameter 'pki_userstaged_id' is set
      if @api_client.config.client_side_validation && pki_userstaged_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_userstaged_id' when calling ObjectUserstagedApi.userstaged_map_v1"
      end
      if @api_client.config.client_side_validation && pki_userstaged_id > 65535
        fail ArgumentError, 'invalid value for "pki_userstaged_id" when calling ObjectUserstagedApi.userstaged_map_v1, must be smaller than or equal to 65535.'
      end

      if @api_client.config.client_side_validation && pki_userstaged_id < 1
        fail ArgumentError, 'invalid value for "pki_userstaged_id" when calling ObjectUserstagedApi.userstaged_map_v1, must be greater than or equal to 1.'
      end

      # verify the required parameter 'userstaged_map_v1_request' is set
      if @api_client.config.client_side_validation && userstaged_map_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'userstaged_map_v1_request' when calling ObjectUserstagedApi.userstaged_map_v1"
      end
      # resource path
      local_var_path = '/1/object/userstaged/{pkiUserstagedID}/map'.sub('{' + 'pkiUserstagedID' + '}', CGI.escape(pki_userstaged_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(userstaged_map_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UserstagedMapV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectUserstagedApi.userstaged_map_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectUserstagedApi#userstaged_map_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
