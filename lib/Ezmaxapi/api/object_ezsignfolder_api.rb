=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module EzmaxApi
  class ObjectEzsignfolderApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Archive the Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderArchiveV1Response]
    def ezsignfolder_archive_v1(pki_ezsignfolder_id, body, opts = {})
      data, _status_code, _headers = ezsignfolder_archive_v1_with_http_info(pki_ezsignfolder_id, body, opts)
      data
    end

    # Archive the Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderArchiveV1Response, Integer, Hash)>] EzsignfolderArchiveV1Response data, response status code and response headers
    def ezsignfolder_archive_v1_with_http_info(pki_ezsignfolder_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_archive_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_archive_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_archive_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectEzsignfolderApi.ezsignfolder_archive_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/archive'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderArchiveV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_archive_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_archive_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Download multiples files from an Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_batch_download_v1_request [EzsignfolderBatchDownloadV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def ezsignfolder_batch_download_v1(pki_ezsignfolder_id, ezsignfolder_batch_download_v1_request, opts = {})
      data, _status_code, _headers = ezsignfolder_batch_download_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_batch_download_v1_request, opts)
      data
    end

    # Download multiples files from an Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_batch_download_v1_request [EzsignfolderBatchDownloadV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def ezsignfolder_batch_download_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_batch_download_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_batch_download_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_batch_download_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_batch_download_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfolder_batch_download_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_batch_download_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_batch_download_v1_request' when calling ObjectEzsignfolderApi.ezsignfolder_batch_download_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/batchDownload'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/zip', 'application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_batch_download_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_batch_download_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_batch_download_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Ezsignfolder
    # The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
    # @param ezsignfolder_create_object_v1_request [Array<EzsignfolderCreateObjectV1Request>] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderCreateObjectV1Response]
    def ezsignfolder_create_object_v1(ezsignfolder_create_object_v1_request, opts = {})
      data, _status_code, _headers = ezsignfolder_create_object_v1_with_http_info(ezsignfolder_create_object_v1_request, opts)
      data
    end

    # Create a new Ezsignfolder
    # The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
    # @param ezsignfolder_create_object_v1_request [Array<EzsignfolderCreateObjectV1Request>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderCreateObjectV1Response, Integer, Hash)>] EzsignfolderCreateObjectV1Response data, response status code and response headers
    def ezsignfolder_create_object_v1_with_http_info(ezsignfolder_create_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_create_object_v1 ...'
      end
      # verify the required parameter 'ezsignfolder_create_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_create_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_create_object_v1_request' when calling ObjectEzsignfolderApi.ezsignfolder_create_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_create_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderCreateObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_create_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_create_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Ezsignfolder
    # The endpoint allows to create one or many elements at once.
    # @param ezsignfolder_create_object_v2_request [EzsignfolderCreateObjectV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderCreateObjectV2Response]
    def ezsignfolder_create_object_v2(ezsignfolder_create_object_v2_request, opts = {})
      data, _status_code, _headers = ezsignfolder_create_object_v2_with_http_info(ezsignfolder_create_object_v2_request, opts)
      data
    end

    # Create a new Ezsignfolder
    # The endpoint allows to create one or many elements at once.
    # @param ezsignfolder_create_object_v2_request [EzsignfolderCreateObjectV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderCreateObjectV2Response, Integer, Hash)>] EzsignfolderCreateObjectV2Response data, response status code and response headers
    def ezsignfolder_create_object_v2_with_http_info(ezsignfolder_create_object_v2_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_create_object_v2 ...'
      end
      # verify the required parameter 'ezsignfolder_create_object_v2_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_create_object_v2_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_create_object_v2_request' when calling ObjectEzsignfolderApi.ezsignfolder_create_object_v2"
      end
      # resource path
      local_var_path = '/2/object/ezsignfolder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_create_object_v2_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderCreateObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_create_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_create_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Ezsignfolder
    # The endpoint allows to create one or many elements at once.
    # @param ezsignfolder_create_object_v3_request [EzsignfolderCreateObjectV3Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderCreateObjectV3Response]
    def ezsignfolder_create_object_v3(ezsignfolder_create_object_v3_request, opts = {})
      data, _status_code, _headers = ezsignfolder_create_object_v3_with_http_info(ezsignfolder_create_object_v3_request, opts)
      data
    end

    # Create a new Ezsignfolder
    # The endpoint allows to create one or many elements at once.
    # @param ezsignfolder_create_object_v3_request [EzsignfolderCreateObjectV3Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderCreateObjectV3Response, Integer, Hash)>] EzsignfolderCreateObjectV3Response data, response status code and response headers
    def ezsignfolder_create_object_v3_with_http_info(ezsignfolder_create_object_v3_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_create_object_v3 ...'
      end
      # verify the required parameter 'ezsignfolder_create_object_v3_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_create_object_v3_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_create_object_v3_request' when calling ObjectEzsignfolderApi.ezsignfolder_create_object_v3"
      end
      # resource path
      local_var_path = '/3/object/ezsignfolder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_create_object_v3_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderCreateObjectV3Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_create_object_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_create_object_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderDeleteObjectV1Response]
    def ezsignfolder_delete_object_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_delete_object_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Delete an existing Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderDeleteObjectV1Response, Integer, Hash)>] EzsignfolderDeleteObjectV1Response data, response status code and response headers
    def ezsignfolder_delete_object_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_delete_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_delete_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_delete_object_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderDeleteObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_delete_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_delete_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dispose Ezsignfolders
    # 
    # @param ezsignfolder_dispose_ezsignfolders_v1_request [EzsignfolderDisposeEzsignfoldersV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderDisposeEzsignfoldersV1Response]
    def ezsignfolder_dispose_ezsignfolders_v1(ezsignfolder_dispose_ezsignfolders_v1_request, opts = {})
      data, _status_code, _headers = ezsignfolder_dispose_ezsignfolders_v1_with_http_info(ezsignfolder_dispose_ezsignfolders_v1_request, opts)
      data
    end

    # Dispose Ezsignfolders
    # 
    # @param ezsignfolder_dispose_ezsignfolders_v1_request [EzsignfolderDisposeEzsignfoldersV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderDisposeEzsignfoldersV1Response, Integer, Hash)>] EzsignfolderDisposeEzsignfoldersV1Response data, response status code and response headers
    def ezsignfolder_dispose_ezsignfolders_v1_with_http_info(ezsignfolder_dispose_ezsignfolders_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_dispose_ezsignfolders_v1 ...'
      end
      # verify the required parameter 'ezsignfolder_dispose_ezsignfolders_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_dispose_ezsignfolders_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_dispose_ezsignfolders_v1_request' when calling ObjectEzsignfolderApi.ezsignfolder_dispose_ezsignfolders_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/disposeEzsignfolders'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_dispose_ezsignfolders_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderDisposeEzsignfoldersV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_dispose_ezsignfolders_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_dispose_ezsignfolders_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Dispose the Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderDisposeV1Response]
    def ezsignfolder_dispose_v1(pki_ezsignfolder_id, body, opts = {})
      data, _status_code, _headers = ezsignfolder_dispose_v1_with_http_info(pki_ezsignfolder_id, body, opts)
      data
    end

    # Dispose the Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderDisposeV1Response, Integer, Hash)>] EzsignfolderDisposeV1Response data, response status code and response headers
    def ezsignfolder_dispose_v1_with_http_info(pki_ezsignfolder_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_dispose_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_dispose_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_dispose_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectEzsignfolderApi.ezsignfolder_dispose_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/dispose'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderDisposeV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_dispose_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_dispose_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an existing Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_edit_object_v3_request [EzsignfolderEditObjectV3Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderEditObjectV3Response]
    def ezsignfolder_edit_object_v3(pki_ezsignfolder_id, ezsignfolder_edit_object_v3_request, opts = {})
      data, _status_code, _headers = ezsignfolder_edit_object_v3_with_http_info(pki_ezsignfolder_id, ezsignfolder_edit_object_v3_request, opts)
      data
    end

    # Edit an existing Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_edit_object_v3_request [EzsignfolderEditObjectV3Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderEditObjectV3Response, Integer, Hash)>] EzsignfolderEditObjectV3Response data, response status code and response headers
    def ezsignfolder_edit_object_v3_with_http_info(pki_ezsignfolder_id, ezsignfolder_edit_object_v3_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_edit_object_v3 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_edit_object_v3"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_edit_object_v3, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfolder_edit_object_v3_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_edit_object_v3_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_edit_object_v3_request' when calling ObjectEzsignfolderApi.ezsignfolder_edit_object_v3"
      end
      # resource path
      local_var_path = '/3/object/ezsignfolder/{pkiEzsignfolderID}'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_edit_object_v3_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderEditObjectV3Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_edit_object_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_edit_object_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # End prematurely
    # End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
    # @param pki_ezsignfolder_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderEndPrematurelyV1Response]
    def ezsignfolder_end_prematurely_v1(pki_ezsignfolder_id, body, opts = {})
      data, _status_code, _headers = ezsignfolder_end_prematurely_v1_with_http_info(pki_ezsignfolder_id, body, opts)
      data
    end

    # End prematurely
    # End prematurely all Ezsigndocument of Ezsignfolder when some signatures are still required
    # @param pki_ezsignfolder_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderEndPrematurelyV1Response, Integer, Hash)>] EzsignfolderEndPrematurelyV1Response data, response status code and response headers
    def ezsignfolder_end_prematurely_v1_with_http_info(pki_ezsignfolder_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_end_prematurely_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_end_prematurely_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_end_prematurely_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectEzsignfolderApi.ezsignfolder_end_prematurely_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/endPrematurely'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderEndPrematurelyV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_end_prematurely_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_end_prematurely_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve actionable elements for the Ezsignfolder
    # Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetActionableElementsV1Response]
    def ezsignfolder_get_actionable_elements_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_actionable_elements_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve actionable elements for the Ezsignfolder
    # Return the Ezsignsignatures that can be signed and Ezsignformfieldgroups that can be filled by the current user at the current step in the process
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetActionableElementsV1Response, Integer, Hash)>] EzsignfolderGetActionableElementsV1Response data, response status code and response headers
    def ezsignfolder_get_actionable_elements_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_actionable_elements_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_actionable_elements_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_actionable_elements_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getActionableElements'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetActionableElementsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_actionable_elements_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_actionable_elements_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Attachment count
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetAttachmentCountV1Response]
    def ezsignfolder_get_attachment_count_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_attachment_count_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve Attachment count
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetAttachmentCountV1Response, Integer, Hash)>] EzsignfolderGetAttachmentCountV1Response data, response status code and response headers
    def ezsignfolder_get_attachment_count_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_attachment_count_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_attachment_count_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_attachment_count_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getAttachmentCount'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetAttachmentCountV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_attachment_count_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_attachment_count_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Ezsignfolder's Attachments
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetAttachmentsV1Response]
    def ezsignfolder_get_attachments_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_attachments_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve Ezsignfolder&#39;s Attachments
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetAttachmentsV1Response, Integer, Hash)>] EzsignfolderGetAttachmentsV1Response data, response status code and response headers
    def ezsignfolder_get_attachments_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_attachments_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_attachments_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_attachments_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getAttachments'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetAttachmentsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_attachments_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_attachments_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Communication count
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetCommunicationCountV1Response]
    def ezsignfolder_get_communication_count_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_communication_count_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve Communication count
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetCommunicationCountV1Response, Integer, Hash)>] EzsignfolderGetCommunicationCountV1Response data, response status code and response headers
    def ezsignfolder_get_communication_count_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_communication_count_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_communication_count_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_communication_count_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationCount'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetCommunicationCountV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_communication_count_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_communication_count_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Communication list
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetCommunicationListV1Response]
    def ezsignfolder_get_communication_list_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_communication_list_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve Communication list
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetCommunicationListV1Response, Integer, Hash)>] EzsignfolderGetCommunicationListV1Response data, response status code and response headers
    def ezsignfolder_get_communication_list_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_communication_list_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_communication_list_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_communication_list_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationList'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetCommunicationListV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_communication_list_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_communication_list_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Ezsignfolder's Communicationrecipient
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetCommunicationrecipientsV1Response]
    def ezsignfolder_get_communicationrecipients_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_communicationrecipients_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve Ezsignfolder&#39;s Communicationrecipient
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetCommunicationrecipientsV1Response, Integer, Hash)>] EzsignfolderGetCommunicationrecipientsV1Response data, response status code and response headers
    def ezsignfolder_get_communicationrecipients_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_communicationrecipients_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_communicationrecipients_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_communicationrecipients_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationrecipients'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetCommunicationrecipientsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_communicationrecipients_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_communicationrecipients_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Ezsignfolder's Communicationsender
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetCommunicationsendersV1Response]
    def ezsignfolder_get_communicationsenders_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_communicationsenders_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve Ezsignfolder&#39;s Communicationsender
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetCommunicationsendersV1Response, Integer, Hash)>] EzsignfolderGetCommunicationsendersV1Response data, response status code and response headers
    def ezsignfolder_get_communicationsenders_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_communicationsenders_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_communicationsenders_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_communicationsenders_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getCommunicationsenders'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetCommunicationsendersV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_communicationsenders_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_communicationsenders_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignfolder's Ezsigndocuments
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetEzsigndocumentsV1Response]
    def ezsignfolder_get_ezsigndocuments_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_ezsigndocuments_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve an existing Ezsignfolder&#39;s Ezsigndocuments
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetEzsigndocumentsV1Response, Integer, Hash)>] EzsignfolderGetEzsigndocumentsV1Response data, response status code and response headers
    def ezsignfolder_get_ezsigndocuments_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_ezsigndocuments_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_ezsigndocuments_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_ezsigndocuments_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsigndocuments'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetEzsigndocumentsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_ezsigndocuments_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_ezsigndocuments_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignfolder's Ezsignfoldersignerassociations
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetEzsignfoldersignerassociationsV1Response]
    def ezsignfolder_get_ezsignfoldersignerassociations_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_ezsignfoldersignerassociations_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve an existing Ezsignfolder&#39;s Ezsignfoldersignerassociations
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetEzsignfoldersignerassociationsV1Response, Integer, Hash)>] EzsignfolderGetEzsignfoldersignerassociationsV1Response data, response status code and response headers
    def ezsignfolder_get_ezsignfoldersignerassociations_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_ezsignfoldersignerassociations_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_ezsignfoldersignerassociations_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_ezsignfoldersignerassociations_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignfoldersignerassociations'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetEzsignfoldersignerassociationsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_ezsignfoldersignerassociations_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_ezsignfoldersignerassociations_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignfolder's automatic Ezsignsignatures
    # Return the Ezsignsignatures that can be signed by the current user at the current step in the process
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetEzsignsignaturesAutomaticV1Response]
    def ezsignfolder_get_ezsignsignatures_automatic_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve an existing Ezsignfolder&#39;s automatic Ezsignsignatures
    # Return the Ezsignsignatures that can be signed by the current user at the current step in the process
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetEzsignsignaturesAutomaticV1Response, Integer, Hash)>] EzsignfolderGetEzsignsignaturesAutomaticV1Response data, response status code and response headers
    def ezsignfolder_get_ezsignsignatures_automatic_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_ezsignsignatures_automatic_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_ezsignsignatures_automatic_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_ezsignsignatures_automatic_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getEzsignsignaturesAutomatic'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetEzsignsignaturesAutomaticV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_ezsignsignatures_automatic_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_ezsignsignatures_automatic_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignfolder's forms data
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetFormsDataV1Response]
    def ezsignfolder_get_forms_data_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_forms_data_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve an existing Ezsignfolder&#39;s forms data
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetFormsDataV1Response, Integer, Hash)>] EzsignfolderGetFormsDataV1Response data, response status code and response headers
    def ezsignfolder_get_forms_data_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_forms_data_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_forms_data_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_forms_data_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/getFormsData'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/zip']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetFormsDataV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_forms_data_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_forms_data_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve Ezsignfolder list
    # Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfolderStep | Unsent<br>Sent<br>PartiallySigned<br>Expired<br>Completed<br>Archived<br>Disposed| | eEzsignfoldertypePrivacylevel | User<br>Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |---| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_order_by Specify how you want the results to be sorted
    # @option opts [Integer] :i_row_max 
    # @option opts [Integer] :i_row_offset  (default to 0)
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @option opts [String] :s_filter 
    # @return [EzsignfolderGetListV1Response]
    def ezsignfolder_get_list_v1(opts = {})
      data, _status_code, _headers = ezsignfolder_get_list_v1_with_http_info(opts)
      data
    end

    # Retrieve Ezsignfolder list
    # Enum values that can be filtered in query parameter *sFilter*:  | Variable | Valid values | |---|---| | eEzsignfolderStep | Unsent&lt;br&gt;Sent&lt;br&gt;PartiallySigned&lt;br&gt;Expired&lt;br&gt;Completed&lt;br&gt;Archived&lt;br&gt;Disposed| | eEzsignfoldertypePrivacylevel | User&lt;br&gt;Usergroup |  Advanced filters that can be used in query parameter *sFilter*:  | Variable | |---| | fkiUserID | | sContactFirstname | | sContactLastname | | sUserFirstname | | sUserLastname | | sEzsigndocumentName |
    # @param [Hash] opts the optional parameters
    # @option opts [String] :e_order_by Specify how you want the results to be sorted
    # @option opts [Integer] :i_row_max 
    # @option opts [Integer] :i_row_offset  (default to 0)
    # @option opts [HeaderAcceptLanguage] :accept_language 
    # @option opts [String] :s_filter 
    # @return [Array<(EzsignfolderGetListV1Response, Integer, Hash)>] EzsignfolderGetListV1Response data, response status code and response headers
    def ezsignfolder_get_list_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_list_v1 ...'
      end
      allowable_values = ["pkiEzsignfolderID_ASC", "pkiEzsignfolderID_DESC", "sEzsignfolderDescription_ASC", "sEzsignfolderDescription_DESC", "dtCreatedDate_ASC", "dtCreatedDate_DESC", "fkiEzsignfoldertypeID_ASC", "fkiEzsignfoldertypeID_DESC", "sEzsignfoldertypeNameX_ASC", "sEzsignfoldertypeNameX_DESC", "eEzsignfolderStep_ASC", "eEzsignfolderStep_DESC", "dtEzsignfolderSentdate_ASC", "dtEzsignfolderSentdate_DESC", "dtEzsignfolderDuedate_ASC", "dtEzsignfolderDuedate_DESC", "iEzsigndocument_ASC", "iEzsigndocument_DESC", "iEzsigndocumentEdm_ASC", "iEzsigndocumentEdm_DESC", "iEzsignsignature_ASC", "iEzsignsignature_DESC", "iEzsignsignatureSigned_ASC", "iEzsignsignatureSigned_DESC", "iEzsignformfieldgroup_ASC", "iEzsignformfieldgroup_DESC", "iEzsignformfieldgroupCompleted_ASC", "iEzsignformfieldgroupCompleted_DESC", "dEzsignfolderCompletedpercentage_ASC", "dEzsignfolderCompletedpercentage_DESC", "dEzsignfolderFormcompletedpercentage_ASC", "dEzsignfolderFormcompletedpercentage_DESC", "dEzsignfolderSignaturecompletedpercentage_ASC", "dEzsignfolderSignaturecompletedpercentagee_DESC"]
      if @api_client.config.client_side_validation && opts[:'e_order_by'] && !allowable_values.include?(opts[:'e_order_by'])
        fail ArgumentError, "invalid value for \"e_order_by\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'i_row_max'].nil? && opts[:'i_row_max'] > 10000
        fail ArgumentError, 'invalid value for "opts[:"i_row_max"]" when calling ObjectEzsignfolderApi.ezsignfolder_get_list_v1, must be smaller than or equal to 10000.'
      end

      if @api_client.config.client_side_validation && !opts[:'i_row_max'].nil? && opts[:'i_row_max'] < 1
        fail ArgumentError, 'invalid value for "opts[:"i_row_max"]" when calling ObjectEzsignfolderApi.ezsignfolder_get_list_v1, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'i_row_offset'].nil? && opts[:'i_row_offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"i_row_offset"]" when calling ObjectEzsignfolderApi.ezsignfolder_get_list_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/getList'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'eOrderBy'] = opts[:'e_order_by'] if !opts[:'e_order_by'].nil?
      query_params[:'iRowMax'] = opts[:'i_row_max'] if !opts[:'i_row_max'].nil?
      query_params[:'iRowOffset'] = opts[:'i_row_offset'] if !opts[:'i_row_offset'].nil?
      query_params[:'sFilter'] = opts[:'s_filter'] if !opts[:'s_filter'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']) unless header_params['Accept']
      header_params[:'Accept-Language'] = opts[:'accept_language'] if !opts[:'accept_language'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetListV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_list_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_list_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetObjectV1Response]
    def ezsignfolder_get_object_v1(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_object_v1_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve an existing Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetObjectV1Response, Integer, Hash)>] EzsignfolderGetObjectV1Response data, response status code and response headers
    def ezsignfolder_get_object_v1_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_object_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetObjectV2Response]
    def ezsignfolder_get_object_v2(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_object_v2_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve an existing Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetObjectV2Response, Integer, Hash)>] EzsignfolderGetObjectV2Response data, response status code and response headers
    def ezsignfolder_get_object_v2_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_object_v2 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_object_v2"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_object_v2, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/2/object/ezsignfolder/{pkiEzsignfolderID}'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderGetObjectV3Response]
    def ezsignfolder_get_object_v3(pki_ezsignfolder_id, opts = {})
      data, _status_code, _headers = ezsignfolder_get_object_v3_with_http_info(pki_ezsignfolder_id, opts)
      data
    end

    # Retrieve an existing Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderGetObjectV3Response, Integer, Hash)>] EzsignfolderGetObjectV3Response data, response status code and response headers
    def ezsignfolder_get_object_v3_with_http_info(pki_ezsignfolder_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_get_object_v3 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_get_object_v3"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_get_object_v3, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/3/object/ezsignfolder/{pkiEzsignfolderID}'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderGetObjectV3Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_get_object_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_get_object_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_import_ezsignfoldersignerassociations_v1_request [EzsignfolderImportEzsignfoldersignerassociationsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderImportEzsignfoldersignerassociationsV1Response]
    def ezsignfolder_import_ezsignfoldersignerassociations_v1(pki_ezsignfolder_id, ezsignfolder_import_ezsignfoldersignerassociations_v1_request, opts = {})
      data, _status_code, _headers = ezsignfolder_import_ezsignfoldersignerassociations_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_import_ezsignfoldersignerassociations_v1_request, opts)
      data
    end

    # Import an existing Ezsignfoldersignerassociation into this Ezsignfolder
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_import_ezsignfoldersignerassociations_v1_request [EzsignfolderImportEzsignfoldersignerassociationsV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderImportEzsignfoldersignerassociationsV1Response, Integer, Hash)>] EzsignfolderImportEzsignfoldersignerassociationsV1Response data, response status code and response headers
    def ezsignfolder_import_ezsignfoldersignerassociations_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_import_ezsignfoldersignerassociations_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_import_ezsignfoldersignerassociations_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_import_ezsignfoldersignerassociations_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_import_ezsignfoldersignerassociations_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfolder_import_ezsignfoldersignerassociations_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_import_ezsignfoldersignerassociations_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_import_ezsignfoldersignerassociations_v1_request' when calling ObjectEzsignfolderApi.ezsignfolder_import_ezsignfoldersignerassociations_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsignfoldersignerassociations'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_import_ezsignfoldersignerassociations_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderImportEzsignfoldersignerassociationsV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_import_ezsignfoldersignerassociations_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_import_ezsignfoldersignerassociations_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import an Ezsigntemplatepackage in the Ezsignfolder.
    # This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_import_ezsigntemplatepackage_v1_request [EzsignfolderImportEzsigntemplatepackageV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderImportEzsigntemplatepackageV1Response]
    def ezsignfolder_import_ezsigntemplatepackage_v1(pki_ezsignfolder_id, ezsignfolder_import_ezsigntemplatepackage_v1_request, opts = {})
      data, _status_code, _headers = ezsignfolder_import_ezsigntemplatepackage_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_import_ezsigntemplatepackage_v1_request, opts)
      data
    end

    # Import an Ezsigntemplatepackage in the Ezsignfolder.
    # This endpoint imports all of the Ezsigntemplates from the Ezsigntemplatepackage into the Ezsignfolder as Ezsigndocuments.  This allows to automatically apply all the Ezsigntemplateformfieldgroups and Ezsigntemplatesignatures on the newly created Ezsigndocuments in a single step.
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_import_ezsigntemplatepackage_v1_request [EzsignfolderImportEzsigntemplatepackageV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderImportEzsigntemplatepackageV1Response, Integer, Hash)>] EzsignfolderImportEzsigntemplatepackageV1Response data, response status code and response headers
    def ezsignfolder_import_ezsigntemplatepackage_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_import_ezsigntemplatepackage_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_import_ezsigntemplatepackage_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_import_ezsigntemplatepackage_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_import_ezsigntemplatepackage_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfolder_import_ezsigntemplatepackage_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_import_ezsigntemplatepackage_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_import_ezsigntemplatepackage_v1_request' when calling ObjectEzsignfolderApi.ezsignfolder_import_ezsigntemplatepackage_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/importEzsigntemplatepackage'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_import_ezsigntemplatepackage_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderImportEzsigntemplatepackageV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_import_ezsigntemplatepackage_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_import_ezsigntemplatepackage_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorder Ezsigndocuments in the Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_reorder_v1_request [EzsignfolderReorderV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderReorderV1Response]
    def ezsignfolder_reorder_v1(pki_ezsignfolder_id, ezsignfolder_reorder_v1_request, opts = {})
      data, _status_code, _headers = ezsignfolder_reorder_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_reorder_v1_request, opts)
      data
    end

    # Reorder Ezsigndocuments in the Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_reorder_v1_request [EzsignfolderReorderV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderReorderV1Response, Integer, Hash)>] EzsignfolderReorderV1Response data, response status code and response headers
    def ezsignfolder_reorder_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_reorder_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_reorder_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_reorder_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_reorder_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfolder_reorder_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_reorder_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_reorder_v1_request' when calling ObjectEzsignfolderApi.ezsignfolder_reorder_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/reorder'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_reorder_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderReorderV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_reorder_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_reorder_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reorder Ezsigndocuments in the Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_reorder_v2_request [EzsignfolderReorderV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderReorderV2Response]
    def ezsignfolder_reorder_v2(pki_ezsignfolder_id, ezsignfolder_reorder_v2_request, opts = {})
      data, _status_code, _headers = ezsignfolder_reorder_v2_with_http_info(pki_ezsignfolder_id, ezsignfolder_reorder_v2_request, opts)
      data
    end

    # Reorder Ezsigndocuments in the Ezsignfolder
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_reorder_v2_request [EzsignfolderReorderV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderReorderV2Response, Integer, Hash)>] EzsignfolderReorderV2Response data, response status code and response headers
    def ezsignfolder_reorder_v2_with_http_info(pki_ezsignfolder_id, ezsignfolder_reorder_v2_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_reorder_v2 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_reorder_v2"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_reorder_v2, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfolder_reorder_v2_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_reorder_v2_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_reorder_v2_request' when calling ObjectEzsignfolderApi.ezsignfolder_reorder_v2"
      end
      # resource path
      local_var_path = '/2/object/ezsignfolder/{pkiEzsignfolderID}/reorder'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_reorder_v2_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderReorderV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_reorder_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_reorder_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send the Ezsignfolder to the signatories for signature
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_send_v1_request [EzsignfolderSendV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderSendV1Response]
    def ezsignfolder_send_v1(pki_ezsignfolder_id, ezsignfolder_send_v1_request, opts = {})
      data, _status_code, _headers = ezsignfolder_send_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v1_request, opts)
      data
    end

    # Send the Ezsignfolder to the signatories for signature
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_send_v1_request [EzsignfolderSendV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderSendV1Response, Integer, Hash)>] EzsignfolderSendV1Response data, response status code and response headers
    def ezsignfolder_send_v1_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_send_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_send_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_send_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfolder_send_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_send_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_send_v1_request' when calling ObjectEzsignfolderApi.ezsignfolder_send_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/send'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_send_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderSendV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_send_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_send_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Send the Ezsignfolder to the signatories for signature
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_send_v3_request [EzsignfolderSendV3Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderSendV3Response]
    def ezsignfolder_send_v3(pki_ezsignfolder_id, ezsignfolder_send_v3_request, opts = {})
      data, _status_code, _headers = ezsignfolder_send_v3_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v3_request, opts)
      data
    end

    # Send the Ezsignfolder to the signatories for signature
    # 
    # @param pki_ezsignfolder_id [Integer] 
    # @param ezsignfolder_send_v3_request [EzsignfolderSendV3Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderSendV3Response, Integer, Hash)>] EzsignfolderSendV3Response data, response status code and response headers
    def ezsignfolder_send_v3_with_http_info(pki_ezsignfolder_id, ezsignfolder_send_v3_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_send_v3 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_send_v3"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_send_v3, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfolder_send_v3_request' is set
      if @api_client.config.client_side_validation && ezsignfolder_send_v3_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfolder_send_v3_request' when calling ObjectEzsignfolderApi.ezsignfolder_send_v3"
      end
      # resource path
      local_var_path = '/3/object/ezsignfolder/{pkiEzsignfolderID}/send'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfolder_send_v3_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderSendV3Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_send_v3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_send_v3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsend the Ezsignfolder
    # Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \"Non-completed\" Ezsigndocuments will be lost.
    # @param pki_ezsignfolder_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfolderUnsendV1Response]
    def ezsignfolder_unsend_v1(pki_ezsignfolder_id, body, opts = {})
      data, _status_code, _headers = ezsignfolder_unsend_v1_with_http_info(pki_ezsignfolder_id, body, opts)
      data
    end

    # Unsend the Ezsignfolder
    # Once an Ezsignfolder has been sent to signatories, it cannot be modified.  Using this endpoint, you can unsend the Ezsignfolder and make it modifiable again.  Signatories will receive an email informing them the signature process was aborted and they might receive a new invitation to sign.  ⚠️ Warning: Any signature previously made by signatories on \&quot;Non-completed\&quot; Ezsigndocuments will be lost.
    # @param pki_ezsignfolder_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfolderUnsendV1Response, Integer, Hash)>] EzsignfolderUnsendV1Response data, response status code and response headers
    def ezsignfolder_unsend_v1_with_http_info(pki_ezsignfolder_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfolderApi.ezsignfolder_unsend_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfolder_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfolder_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfolder_id' when calling ObjectEzsignfolderApi.ezsignfolder_unsend_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfolder_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfolder_id" when calling ObjectEzsignfolderApi.ezsignfolder_unsend_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectEzsignfolderApi.ezsignfolder_unsend_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfolder/{pkiEzsignfolderID}/unsend'.sub('{' + 'pkiEzsignfolderID' + '}', CGI.escape(pki_ezsignfolder_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfolderUnsendV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfolderApi.ezsignfolder_unsend_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfolderApi#ezsignfolder_unsend_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
