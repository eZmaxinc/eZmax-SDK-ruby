=begin
#eZmax API Definition (Full)

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.2.1
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
Generator version: 7.9.0

=end

require 'cgi'

module EzmaxApi
  class ObjectEzsignfoldersignerassociationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates an Url to allow embedded signing
    # This endpoint creates an Url that can be used in a browser or embedded in an I-Frame to allow signing.  The signer Login type must be configured as Embedded.
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param ezsignfoldersignerassociation_create_embedded_url_v1_request [EzsignfoldersignerassociationCreateEmbeddedUrlV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationCreateEmbeddedUrlV1Response]
    def ezsignfoldersignerassociation_create_embedded_url_v1(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_create_embedded_url_v1_request, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_create_embedded_url_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_create_embedded_url_v1_request, opts)
      data
    end

    # Creates an Url to allow embedded signing
    # This endpoint creates an Url that can be used in a browser or embedded in an I-Frame to allow signing.  The signer Login type must be configured as Embedded.
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param ezsignfoldersignerassociation_create_embedded_url_v1_request [EzsignfoldersignerassociationCreateEmbeddedUrlV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationCreateEmbeddedUrlV1Response, Integer, Hash)>] EzsignfoldersignerassociationCreateEmbeddedUrlV1Response data, response status code and response headers
    def ezsignfoldersignerassociation_create_embedded_url_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_create_embedded_url_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_embedded_url_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfoldersignerassociation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfoldersignerassociation_id' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_embedded_url_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldersignerassociation_id" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_embedded_url_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfoldersignerassociation_create_embedded_url_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfoldersignerassociation_create_embedded_url_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfoldersignerassociation_create_embedded_url_v1_request' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_embedded_url_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/createEmbeddedUrl'.sub('{' + 'pkiEzsignfoldersignerassociationID' + '}', CGI.escape(pki_ezsignfoldersignerassociation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfoldersignerassociation_create_embedded_url_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationCreateEmbeddedUrlV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_embedded_url_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_create_embedded_url_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Ezsignfoldersignerassociation
    # The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
    # @param ezsignfoldersignerassociation_create_object_v1_request [Array<EzsignfoldersignerassociationCreateObjectV1Request>] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationCreateObjectV1Response]
    def ezsignfoldersignerassociation_create_object_v1(ezsignfoldersignerassociation_create_object_v1_request, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_create_object_v1_with_http_info(ezsignfoldersignerassociation_create_object_v1_request, opts)
      data
    end

    # Create a new Ezsignfoldersignerassociation
    # The endpoint allows to create one or many elements at once.  The array can contain simple (Just the object) or compound (The object and its child) objects.  Creating compound elements allows to reduce the multiple requests to create all child objects.
    # @param ezsignfoldersignerassociation_create_object_v1_request [Array<EzsignfoldersignerassociationCreateObjectV1Request>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationCreateObjectV1Response, Integer, Hash)>] EzsignfoldersignerassociationCreateObjectV1Response data, response status code and response headers
    def ezsignfoldersignerassociation_create_object_v1_with_http_info(ezsignfoldersignerassociation_create_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_object_v1 ...'
      end
      # verify the required parameter 'ezsignfoldersignerassociation_create_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfoldersignerassociation_create_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfoldersignerassociation_create_object_v1_request' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfoldersignerassociation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfoldersignerassociation_create_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationCreateObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_create_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new Ezsignfoldersignerassociation
    # The endpoint allows to create one or many elements at once.
    # @param ezsignfoldersignerassociation_create_object_v2_request [EzsignfoldersignerassociationCreateObjectV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationCreateObjectV2Response]
    def ezsignfoldersignerassociation_create_object_v2(ezsignfoldersignerassociation_create_object_v2_request, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_create_object_v2_with_http_info(ezsignfoldersignerassociation_create_object_v2_request, opts)
      data
    end

    # Create a new Ezsignfoldersignerassociation
    # The endpoint allows to create one or many elements at once.
    # @param ezsignfoldersignerassociation_create_object_v2_request [EzsignfoldersignerassociationCreateObjectV2Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationCreateObjectV2Response, Integer, Hash)>] EzsignfoldersignerassociationCreateObjectV2Response data, response status code and response headers
    def ezsignfoldersignerassociation_create_object_v2_with_http_info(ezsignfoldersignerassociation_create_object_v2_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_object_v2 ...'
      end
      # verify the required parameter 'ezsignfoldersignerassociation_create_object_v2_request' is set
      if @api_client.config.client_side_validation && ezsignfoldersignerassociation_create_object_v2_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfoldersignerassociation_create_object_v2_request' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_object_v2"
      end
      # resource path
      local_var_path = '/2/object/ezsignfoldersignerassociation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfoldersignerassociation_create_object_v2_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationCreateObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_create_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_create_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete an existing Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationDeleteObjectV1Response]
    def ezsignfoldersignerassociation_delete_object_v1(pki_ezsignfoldersignerassociation_id, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_delete_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, opts)
      data
    end

    # Delete an existing Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationDeleteObjectV1Response, Integer, Hash)>] EzsignfoldersignerassociationDeleteObjectV1Response data, response status code and response headers
    def ezsignfoldersignerassociation_delete_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_delete_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfoldersignerassociation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfoldersignerassociation_id' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_delete_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldersignerassociation_id" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_delete_object_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}'.sub('{' + 'pkiEzsignfoldersignerassociationID' + '}', CGI.escape(pki_ezsignfoldersignerassociation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationDeleteObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_delete_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_delete_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Edit an existing Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param ezsignfoldersignerassociation_edit_object_v1_request [EzsignfoldersignerassociationEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationEditObjectV1Response]
    def ezsignfoldersignerassociation_edit_object_v1(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_edit_object_v1_request, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_edit_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_edit_object_v1_request, opts)
      data
    end

    # Edit an existing Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param ezsignfoldersignerassociation_edit_object_v1_request [EzsignfoldersignerassociationEditObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationEditObjectV1Response, Integer, Hash)>] EzsignfoldersignerassociationEditObjectV1Response data, response status code and response headers
    def ezsignfoldersignerassociation_edit_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_edit_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_edit_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfoldersignerassociation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfoldersignerassociation_id' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_edit_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldersignerassociation_id" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_edit_object_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfoldersignerassociation_edit_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfoldersignerassociation_edit_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfoldersignerassociation_edit_object_v1_request' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_edit_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}'.sub('{' + 'pkiEzsignfoldersignerassociationID' + '}', CGI.escape(pki_ezsignfoldersignerassociation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfoldersignerassociation_edit_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationEditObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_edit_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_edit_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Disconnects the Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationForceDisconnectV1Response]
    def ezsignfoldersignerassociation_force_disconnect_v1(pki_ezsignfoldersignerassociation_id, body, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_force_disconnect_v1_with_http_info(pki_ezsignfoldersignerassociation_id, body, opts)
      data
    end

    # Disconnects the Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param body [Object] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationForceDisconnectV1Response, Integer, Hash)>] EzsignfoldersignerassociationForceDisconnectV1Response data, response status code and response headers
    def ezsignfoldersignerassociation_force_disconnect_v1_with_http_info(pki_ezsignfoldersignerassociation_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_force_disconnect_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfoldersignerassociation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfoldersignerassociation_id' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_force_disconnect_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldersignerassociation_id" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_force_disconnect_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_force_disconnect_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/forceDisconnect'.sub('{' + 'pkiEzsignfoldersignerassociationID' + '}', CGI.escape(pki_ezsignfoldersignerassociation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationForceDisconnectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_force_disconnect_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_force_disconnect_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve a Login Url to allow In-Person signing
    # This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationGetInPersonLoginUrlV1Response]
    def ezsignfoldersignerassociation_get_in_person_login_url_v1(pki_ezsignfoldersignerassociation_id, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_get_in_person_login_url_v1_with_http_info(pki_ezsignfoldersignerassociation_id, opts)
      data
    end

    # Retrieve a Login Url to allow In-Person signing
    # This endpoint returns a Login Url that can be used in a browser or embedded in an I-Frame to allow in person signing.  The signer Login type must be configured as In-Person.
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationGetInPersonLoginUrlV1Response, Integer, Hash)>] EzsignfoldersignerassociationGetInPersonLoginUrlV1Response data, response status code and response headers
    def ezsignfoldersignerassociation_get_in_person_login_url_v1_with_http_info(pki_ezsignfoldersignerassociation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_in_person_login_url_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfoldersignerassociation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfoldersignerassociation_id' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_in_person_login_url_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldersignerassociation_id" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_in_person_login_url_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/getInPersonLoginUrl'.sub('{' + 'pkiEzsignfoldersignerassociationID' + '}', CGI.escape(pki_ezsignfoldersignerassociation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationGetInPersonLoginUrlV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_in_person_login_url_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_get_in_person_login_url_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationGetObjectV1Response]
    def ezsignfoldersignerassociation_get_object_v1(pki_ezsignfoldersignerassociation_id, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_get_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, opts)
      data
    end

    # Retrieve an existing Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationGetObjectV1Response, Integer, Hash)>] EzsignfoldersignerassociationGetObjectV1Response data, response status code and response headers
    def ezsignfoldersignerassociation_get_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfoldersignerassociation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfoldersignerassociation_id' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldersignerassociation_id" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_object_v1, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}'.sub('{' + 'pkiEzsignfoldersignerassociationID' + '}', CGI.escape(pki_ezsignfoldersignerassociation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationGetObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_get_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve an existing Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationGetObjectV2Response]
    def ezsignfoldersignerassociation_get_object_v2(pki_ezsignfoldersignerassociation_id, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_get_object_v2_with_http_info(pki_ezsignfoldersignerassociation_id, opts)
      data
    end

    # Retrieve an existing Ezsignfoldersignerassociation
    # 
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationGetObjectV2Response, Integer, Hash)>] EzsignfoldersignerassociationGetObjectV2Response data, response status code and response headers
    def ezsignfoldersignerassociation_get_object_v2_with_http_info(pki_ezsignfoldersignerassociation_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_object_v2 ...'
      end
      # verify the required parameter 'pki_ezsignfoldersignerassociation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfoldersignerassociation_id' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_object_v2"
      end
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldersignerassociation_id" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_object_v2, must be greater than or equal to 0.'
      end

      # resource path
      local_var_path = '/2/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}'.sub('{' + 'pkiEzsignfoldersignerassociationID' + '}', CGI.escape(pki_ezsignfoldersignerassociation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationGetObjectV2Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_get_object_v2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_get_object_v2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Patch an existing Ezsignfoldersignerassociation
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param ezsignfoldersignerassociation_patch_object_v1_request [EzsignfoldersignerassociationPatchObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationPatchObjectV1Response]
    def ezsignfoldersignerassociation_patch_object_v1(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_patch_object_v1_request, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_patch_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_patch_object_v1_request, opts)
      data
    end

    # Patch an existing Ezsignfoldersignerassociation
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param ezsignfoldersignerassociation_patch_object_v1_request [EzsignfoldersignerassociationPatchObjectV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationPatchObjectV1Response, Integer, Hash)>] EzsignfoldersignerassociationPatchObjectV1Response data, response status code and response headers
    def ezsignfoldersignerassociation_patch_object_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_patch_object_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_patch_object_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfoldersignerassociation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfoldersignerassociation_id' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_patch_object_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldersignerassociation_id" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_patch_object_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfoldersignerassociation_patch_object_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfoldersignerassociation_patch_object_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfoldersignerassociation_patch_object_v1_request' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_patch_object_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}'.sub('{' + 'pkiEzsignfoldersignerassociationID' + '}', CGI.escape(pki_ezsignfoldersignerassociation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfoldersignerassociation_patch_object_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationPatchObjectV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_patch_object_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_patch_object_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reassign remaining unsigned signatures and forms
    # Reassign remaining unsigned signatures and forms
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param ezsignfoldersignerassociation_reassign_v1_request [EzsignfoldersignerassociationReassignV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [EzsignfoldersignerassociationReassignV1Response]
    def ezsignfoldersignerassociation_reassign_v1(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_reassign_v1_request, opts = {})
      data, _status_code, _headers = ezsignfoldersignerassociation_reassign_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_reassign_v1_request, opts)
      data
    end

    # Reassign remaining unsigned signatures and forms
    # Reassign remaining unsigned signatures and forms
    # @param pki_ezsignfoldersignerassociation_id [Integer] 
    # @param ezsignfoldersignerassociation_reassign_v1_request [EzsignfoldersignerassociationReassignV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EzsignfoldersignerassociationReassignV1Response, Integer, Hash)>] EzsignfoldersignerassociationReassignV1Response data, response status code and response headers
    def ezsignfoldersignerassociation_reassign_v1_with_http_info(pki_ezsignfoldersignerassociation_id, ezsignfoldersignerassociation_reassign_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_reassign_v1 ...'
      end
      # verify the required parameter 'pki_ezsignfoldersignerassociation_id' is set
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id.nil?
        fail ArgumentError, "Missing the required parameter 'pki_ezsignfoldersignerassociation_id' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_reassign_v1"
      end
      if @api_client.config.client_side_validation && pki_ezsignfoldersignerassociation_id < 0
        fail ArgumentError, 'invalid value for "pki_ezsignfoldersignerassociation_id" when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_reassign_v1, must be greater than or equal to 0.'
      end

      # verify the required parameter 'ezsignfoldersignerassociation_reassign_v1_request' is set
      if @api_client.config.client_side_validation && ezsignfoldersignerassociation_reassign_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'ezsignfoldersignerassociation_reassign_v1_request' when calling ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_reassign_v1"
      end
      # resource path
      local_var_path = '/1/object/ezsignfoldersignerassociation/{pkiEzsignfoldersignerassociationID}/reassign'.sub('{' + 'pkiEzsignfoldersignerassociationID' + '}', CGI.escape(pki_ezsignfoldersignerassociation_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(ezsignfoldersignerassociation_reassign_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EzsignfoldersignerassociationReassignV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ObjectEzsignfoldersignerassociationApi.ezsignfoldersignerassociation_reassign_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ObjectEzsignfoldersignerassociationApi#ezsignfoldersignerassociation_reassign_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
