=begin
#eZmax API Definition

#This API expose all the functionnalities for the eZmax and eZsign applications.

The version of the OpenAPI document: 1.1.4
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0-SNAPSHOT

=end

require 'cgi'

module EzmaxApi
  class ModuleListApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get all Listpresentation for a specific list
    # Retrive previously saved Listpresentation
    # @param s_list_name [String] The list Name
    # @param [Hash] opts the optional parameters
    # @return [ListGetListpresentationV1Response]
    def list_get_listpresentation_v1(s_list_name, opts = {})
      data, _status_code, _headers = list_get_listpresentation_v1_with_http_info(s_list_name, opts)
      data
    end

    # Get all Listpresentation for a specific list
    # Retrive previously saved Listpresentation
    # @param s_list_name [String] The list Name
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListGetListpresentationV1Response, Integer, Hash)>] ListGetListpresentationV1Response data, response status code and response headers
    def list_get_listpresentation_v1_with_http_info(s_list_name, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModuleListApi.list_get_listpresentation_v1 ...'
      end
      # verify the required parameter 's_list_name' is set
      if @api_client.config.client_side_validation && s_list_name.nil?
        fail ArgumentError, "Missing the required parameter 's_list_name' when calling ModuleListApi.list_get_listpresentation_v1"
      end
      # resource path
      local_var_path = '/1/module/list/listpresentation/{sListName}'.sub('{' + 'sListName' + '}', CGI.escape(s_list_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListGetListpresentationV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ModuleListApi.list_get_listpresentation_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModuleListApi#list_get_listpresentation_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Save all Listpresentation for a specific list
    # Users can create many Listpresentations for lists in the system. They can customize orber by, filters, numbers of rows, etc.
    # @param s_list_name [String] The list Name
    # @param list_save_listpresentation_v1_request [ListSaveListpresentationV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [ListSaveListpresentationV1Response]
    def list_save_listpresentation_v1(s_list_name, list_save_listpresentation_v1_request, opts = {})
      data, _status_code, _headers = list_save_listpresentation_v1_with_http_info(s_list_name, list_save_listpresentation_v1_request, opts)
      data
    end

    # Save all Listpresentation for a specific list
    # Users can create many Listpresentations for lists in the system. They can customize orber by, filters, numbers of rows, etc.
    # @param s_list_name [String] The list Name
    # @param list_save_listpresentation_v1_request [ListSaveListpresentationV1Request] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListSaveListpresentationV1Response, Integer, Hash)>] ListSaveListpresentationV1Response data, response status code and response headers
    def list_save_listpresentation_v1_with_http_info(s_list_name, list_save_listpresentation_v1_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ModuleListApi.list_save_listpresentation_v1 ...'
      end
      # verify the required parameter 's_list_name' is set
      if @api_client.config.client_side_validation && s_list_name.nil?
        fail ArgumentError, "Missing the required parameter 's_list_name' when calling ModuleListApi.list_save_listpresentation_v1"
      end
      # verify the required parameter 'list_save_listpresentation_v1_request' is set
      if @api_client.config.client_side_validation && list_save_listpresentation_v1_request.nil?
        fail ArgumentError, "Missing the required parameter 'list_save_listpresentation_v1_request' when calling ModuleListApi.list_save_listpresentation_v1"
      end
      # resource path
      local_var_path = '/1/module/list/listpresentation/{sListName}'.sub('{' + 'sListName' + '}', CGI.escape(s_list_name.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(list_save_listpresentation_v1_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ListSaveListpresentationV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"ModuleListApi.list_save_listpresentation_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ModuleListApi#list_save_listpresentation_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
