=begin
#eZmax API Definition

#This API expose all the functionnalities for the eZmax and eZsign application.  We provide SDKs for customers. They are generated using OpenAPI codegen, we encourage customers to use them as we also provide samples for them.  You can choose to build your own implementation manually or can use any compatible OpenAPI 3.0 generator like Swagger Codegen, OpenAPI codegen or any commercial generators.  If you need helping understanding how to use this API, don't waste too much time looking for it. Contact support-api@ezmax.ca, we're here to help. We are developpers so we know programmers don't like bad documentation. If you don't find what you need in the documentation, let us know, we'll improve it and put you rapidly up on track.

The version of the OpenAPI document: 1.0.29
Contact: support-api@ezmax.ca
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.1.0-SNAPSHOT

=end

require 'cgi'

module EzmaxApi
  class GlobalCustomerApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get customer endpoint
    # Retrieve the customer's specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer's data is stored.
    # @param pks_customer_code [String] The customer code assigned to your account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :s_infrastructureproduct_code The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed
    # @return [GlobalCustomerGetEndpointV1Response]
    def global_customer_get_endpoint_v1(pks_customer_code, opts = {})
      data, _status_code, _headers = global_customer_get_endpoint_v1_with_http_info(pks_customer_code, opts)
      data
    end

    # Get customer endpoint
    # Retrieve the customer&#39;s specific server endpoint where to send requests. This will help locate the proper region (ie: sInfrastructureregionCode) and the proper environment (ie: sInfrastructureenvironmenttypeDescription) where the customer&#39;s data is stored.
    # @param pks_customer_code [String] The customer code assigned to your account
    # @param [Hash] opts the optional parameters
    # @option opts [String] :s_infrastructureproduct_code The infrastructure product Code  If undefined, \&quot;appcluster01\&quot; is assumed
    # @return [Array<(GlobalCustomerGetEndpointV1Response, Integer, Hash)>] GlobalCustomerGetEndpointV1Response data, response status code and response headers
    def global_customer_get_endpoint_v1_with_http_info(pks_customer_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: GlobalCustomerApi.global_customer_get_endpoint_v1 ...'
      end
      # verify the required parameter 'pks_customer_code' is set
      if @api_client.config.client_side_validation && pks_customer_code.nil?
        fail ArgumentError, "Missing the required parameter 'pks_customer_code' when calling GlobalCustomerApi.global_customer_get_endpoint_v1"
      end
      allowable_values = ["appcluster01", "ezsignuser"]
      if @api_client.config.client_side_validation && opts[:'s_infrastructureproduct_code'] && !allowable_values.include?(opts[:'s_infrastructureproduct_code'])
        fail ArgumentError, "invalid value for \"s_infrastructureproduct_code\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/1/customer/{pksCustomerCode}/endpoint'.sub('{' + 'pksCustomerCode' + '}', CGI.escape(pks_customer_code.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'sInfrastructureproductCode'] = opts[:'s_infrastructureproduct_code'] if !opts[:'s_infrastructureproduct_code'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GlobalCustomerGetEndpointV1Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['Authorization']

      new_options = opts.merge(
        :operation => :"GlobalCustomerApi.global_customer_get_endpoint_v1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: GlobalCustomerApi#global_customer_get_endpoint_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
